select(nsplit, CP, xerror)
cost %>% head()
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"y", "n")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_bw() +
theme(legend.position = "none") +
scale_color_manual(values = c("black", "red")) +
annotate("text", x = 25, y = 0.17, label = "Minimum Error", color = "red")
tree$cptable %>%
as_tibble() %>%
select(nsplit, CP, xerror) %>%
arrange(xerror) %>%
head()
pruned_tree <- prune(tree,
cp = tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"])
library(caret)
set.seed(42)
index <- createDataPartition(y = health_insurance$charges,
p = 0.8, list = F)
train <- health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
simple_tree <- rpart(formula = charges ~  .,
data = train,
control = rpart.control(cp = 0.0001,
minbucket = 200,
maxdepth = 10))
rpart.plot(simple_tree, type = 3)
tree_pred <- predict(tree, test)
simple_tree_pred <- predict(simple_tree, test)
get_rmsle <- function(y, y_hat){
sqrt(mean((log(y) - log(y_hat))^2))
}
get_rmsle(test$charges, tree_pred)
get_rmsle(test$charges, simple_tree_pred)
get_rmsle(test$charges, mean(train$charges))
library(randomForest)
tree <- rpart(charges ~ age + bmi, data = health_insurance)
df <- health_insurance %>% mutate(
prediction = predict(tree, health_insurance))
p1 <- df %>%
ggplot(aes(bmi, age, color = prediction)) +
geom_point() +
theme_bw() +
labs(title ="Decision Tree") +
theme(legend.position = "none")
rf <- randomForest(charges ~ age + bmi,
data = health_insurance, ntree = 50)
df <- health_insurance %>% mutate(
prediction = predict(rf, health_insurance))
p2 <- df %>%
ggplot(aes(bmi, age, color = prediction)) +
geom_point() +
theme_bw() +
labs(title ="Random Forest") +
theme(legend.position = "none")
library(ggpubr)
ggarrange(p1,p2)
rf_data <- health_insurance %>%
mutate(sex = ifelse(sex == "male", 1, 0),
smoker = ifelse(smoker == "yes", 1, 0),
region_ne = ifelse(region == "northeast", 1,0),
region_nw = ifelse(region == "northwest", 1,0),
region_se = ifelse(region == "southeast", 1,0),
region_sw = ifelse(region == "southwest", 1,0)) %>%
select(-region)
rf_data %>% glimpse(50)
library(caret)
set.seed(42)
index <- createDataPartition(y = rf_data$charges,
p = 0.8, list = F)
train <- rf_data %>% slice(index)
test <- rf_data %>% slice(-index)
rf <- randomForest(charges ~ ., data = train, ntree = 500)
plot(rf)
pred <- predict(rf, test)
get_rmsle <- function(y, y_hat){
sqrt(mean((log(y) - log(y_hat))^2))
}
get_rmsle(test$charges, pred)
get_rmsle(test$charges, mean(train$charges))
varImpPlot(x = rf)
df <- tibble(x1 = c(1,1,2,2), x2 = c(3,4,5,6)) %>%
mutate(f = 2*x1 + 3*x2)
df
df %>% group_by(x1) %>% summarise(f = mean(f))
library(pdp)
bmi <- pdp::partial(rf, pred.var = "bmi",
grid.resolution = 20) %>%
autoplot() + theme_bw()
age <- pdp::partial(rf, pred.var = "age",
grid.resolution = 20) %>%
autoplot() + theme_bw()
ggarrange(bmi, age)
library(gbm)
gbm <- gbm(charges ~ ., data = train,
n.trees = 100,
interaction.depth = 2,
n.minobsinnode = 50,
shrinkage = 0.1)
pred <- predict(gbm, test, n.trees = 100)
get_rmsle(test$charges, pred)
get_rmsle(test$charges, mean(train$charges))
set.seed(42)
#For the sake of this example, only take 20% of the records
df <- soa_mortality %>%
sample_frac(0.2) %>%
mutate(target = as.factor(ifelse(actual_cnt == 0, 1, 0))) %>%
select(target, prodcat, distchan, smoker, sex, issage, uwkey) %>%
mutate_if(is.character, ~as.factor(.x))
#check that the target has 0's and 1's
df %>% count(target)
gbm <- train(charges ~ bmi + age + sex + region,
data = health_insurance_train,
method='gbm',
tuneGrid=tunegrid,
trControl=control,
#Show detailed output
verbose = FALSE
)
gbm <- train(charges ~ bmi + age + sex + region,
data = train,
method='gbm',
tuneGrid=tunegrid,
trControl=control,
#Show detailed output
verbose = FALSE
)
names(train)
gbm <- train(charges ~ .,
data = train,
method='gbm',
tuneGrid=tunegrid,
trControl=control,
#Show detailed output
verbose = FALSE
)
tunegrid <- expand.grid(
interaction.depth = c(1,3,5),
n.trees = c(20, 40, 100),
shrinkage = c(0.01, 0.001, 0.0001),
n.minobsinnode = 20)
nrow(tunegrid)
control <- trainControl(
method='repeatedcv',
number=5,
p = 0.8)
gbm <- train(charges ~ .,
data = train,
method='gbm',
tuneGrid=tunegrid,
trControl=control,
#Show detailed output
verbose = FALSE
)
trellis.par.set(caretTheme())
plot(gbm)
tunegrid
tunegrid <- expand.grid(
interaction.depth = c(1,3,5),
n.trees = c(20, 40, 100),
shrinkage = c(0.01, 0.001, 0.0001),
n.minobsinnode = 20
)
nrow(tunegrid)
control <- trainControl(
method='repeatedcv',
number=5,
p = 0.8)
gbm <- train(charges ~ .,
data = train,
method='gbm',
tuneGrid=tunegrid,
trControl=control,
#Show detailed output
verbose = FALSE
)
gbm$bestTune
gbm$results
gbm$results %>% top_n(RMSE)
gbm$results %>% top_n(1,RMSE)
top_result <- gbm$results %>% arrange(RMSE)
tenth_result <- tunegrid %>% slice(10)
top_result <- tunegrid %>% slice(1)
tenth_result <- tunegrid %>% slice(10)
top_result <- results %>% slice(1)
results <- gbm$results %>% arrange(RMSE)
top_result <- results %>% slice(1)
tenth_result <- results %>% slice(10)
twenty_seventh_result <- results %>% slice(27)
top_result
tenth_result
twenty_seventh_result
top_result
tenth_result
twenty_seventh_result
top_result %>% mutate(param_rank = 1)
tenth_result %>% mutate(param_rank = 10)
twenty_seventh_result %>% mutate(param_rank = 27)
rbind(top_result, tenth_result, twenty_seventh_result)
rbind(top_result, tenth_result, twenty_seventh_result) %>%
select(1:5)
rbind(top_result, tenth_result, twenty_seventh_result) %>%
select(param_rank, 1:5)
rbind(top_result, tenth_result, twenty_seventh_result)
top_result <- results %>% slice(1)%>% mutate(param_rank = 1)
tenth_result <- results %>% slice(10)%>% mutate(param_rank = 10)
twenty_seventh_result <- results %>% slice(27)%>% mutate(param_rank = 27)
rbind(top_result, tenth_result, twenty_seventh_result) %>%
select(param_rank, 1:5)
results
results %>% ggplot(aes(n.trees, RMSE))
results %>% ggplot(aes(n.trees, RMSE)) + geom_line()
results %>% ggplot(aes(n.trees, MAE)) + geom_line()
tunegrid <- expand.grid(
interaction.depth = c(1,3,5),
n.trees = c(100, 200, 300, 400, 500),
shrinkage = c(0.01, 0.001, 0.0001),
n.minobsinnode = 20
)
nrow(tunegrid)
control <- trainControl(
method='repeatedcv',
number=5,
p = 0.8)
gbm <- train(charges ~ .,
data = train,
method='gbm',
tuneGrid=tunegrid,
trControl=control,
#Show detailed output
verbose = FALSE
)
results <- gbm$results %>% arrange(RMSE)
top_result <- results %>% slice(1)%>% mutate(param_rank = 1)
tenth_result <- results %>% slice(10)%>% mutate(param_rank = 10)
twenty_seventh_result <- results %>% slice(45)%>% mutate(param_rank = 45)
rbind(top_result, tenth_result, twenty_seventh_result) %>%
select(param_rank, 1:5)
tunegrid <- expand.grid(
interaction.depth = c(1,5, 10),
n.trees = c(100, 200, 300, 400, 500),
shrinkage = c(0.5, 0.1, 0.0001),
n.minobsinnode = c(5, 30, 100)
)
nrow(tunegrid)
control <- trainControl(
method='repeatedcv',
number=5,
p = 0.8)
gbm <- train(charges ~ .,
data = train,
method='gbm',
tuneGrid=tunegrid,
trControl=control,
#Show detailed output
verbose = FALSE
)
results <- gbm$results %>% arrange(RMSE)
top_result <- results %>% slice(1)%>% mutate(param_rank = 1)
tenth_result <- results %>% slice(10)%>% mutate(param_rank = 10)
twenty_seventh_result <- results %>% slice(135)%>% mutate(param_rank = 135)
rbind(top_result, tenth_result, twenty_seventh_result) %>%
select(param_rank, 1:5)
str(gmb,1)
str(gbm,1)
str(gbm)
str(gbm,1)
gbm$bestTune
str(gbm,1)
gbm$bestTune
results <- gbm$results %>% arrange(RMSE)
top_result <- results %>% slice(1)%>% mutate(param_rank = 1)
tenth_result <- results %>% slice(10)%>% mutate(param_rank = 10)
twenty_seventh_result <- results %>% slice(135)%>% mutate(param_rank = 135)
rbind(top_result, tenth_result, twenty_seventh_result) %>%
select(param_rank, 1:5)
results %>% ggplot(aes(n.trees, RMSE)) + geom_line()
results %>% ggplot(aes(n.trees, MAE)) + geom_line()
gbm$modelInfo
summary(gbm, plotit = F) %>% as_tibble()
varImp(gbm)
partial(gbm, "bmi")
?pdp::partial
partial(gbm, "bmi", grid.resolution = 10)
partial(gbm, "bmi", grid.resolution = 10) %>% autoplot()
partial(gbm, "bmi", grid.resolution = 10, ice = T) %>% autoplot()
partial(gbm, "bmi", grid.resolution = 5, ice = T) %>% autoplot()
partial(gbm, "bmi", grid.resolution = 20, ice = T) %>% autoplot()
partial(gbm, "bmi", grid.resolution = 20, ice = T, rug = T) %>% autoplot()
partial(gbm, "bmi", grid.resolution = 20, ice = T, rug = T, alpha = 0.2) %>% autoplot()
partial(gbm, "bmi", grid.resolution = 20, ice = T, rug = T, cats = "sex") %>% autoplot()
library(randomForest)
data (boston)  # load the boston housing data
set.seed(101)  # for reproducibility
boston.rf <- randomForest(cmedv ~ ., data = boston)
# Using randomForest's partialPlot function
partialPlot(boston.rf, pred.data = boston, x.var = "lstat")
# Using pdp's partial function
head(partial(boston.rf, pred.var = "lstat"))  # returns a data frame
partial(boston.rf, pred.var = "lstat", plot = TRUE, rug = TRUE)
partial(gbm, "bmi", grid.resolution = 20, rug = T, cats = "sex") %>% autoplot()
partial(gbm, "bmi", grid.resolution = 20, rug = T) %>% autoplot()
partial(gbm, "bmi", grid.resolution = 20, rug = T, plot = T)
partial(gbm, pred.var = "bmi", grid.resolution = 20, rug = T, plot = T)
lattice.options(panel.error="stop")
partial(gbm, pred.var = "bmi", grid.resolution = 20, rug = T, plot = T)
lattice.options(panel.error="stop")
partial(gbm, pred.var = "bmi", grid.resolution = 20, rug = T, plot = T)
partial(gbm, pred.var = "bmi", grid.resolution = 20, plot = T)
partial(gbm, pred.var = "bmi", grid.resolution = 20, plot = T, ice = T)
partial(gbm, pred.var = "bmi", grid.resolution = 20, plot = T)
# The partial function allows for multiple predictors
partial(boston.rf, pred.var = c("lstat", "rm"), grid.resolution = 40,
plot = TRUE, chull = TRUE, progress = "text")
partial(gbm, pred.var = "bmi", grid.resolution = 20, plot = T)
partial(gbm, pred.var = "bmi", grid.resolution = 20, plot = T)
partial(gbm, pred.var = "bmi", grid.resolution = 20, plot = T, ice = T)
partial(gbm, pred.var = "bmi", grid.resolution = 20, plot = T, ice = T, alpha = 0.1)
pd <- partial(boston.rf, pred.var = c("lstat", "rm"), grid.resolution = 40)
plotPartial(pd, levelplot = FALSE, zlab = "cmedv", drape = TRUE,
colorkey = FALSE, screen = list(z = -20, x = -60))
partial(gbm, pred.var = c("bmi", "sex"), grid.resolution = 20, plot = T)
partial(gbm, pred.var = c("bmi", "sex"), grid.resolution = 20, plot = T)
train %>% ggplot(aes(charges, bmi, color = sex)) + geom_point()
head(train)
train %>% ggplot(aes(charges, bmi, color = smoker)) + geom_point()
train %>% ggplot(aes(charges, bmi, color = factor(smoker))) + geom_point()
train %>% ggplot(aes(charges, bmi, color = factor(smoker))) + geom_point() + theme_bw()
train %>% ggplot(aes(bmi,charges, color = factor(smoker))) + geom_point() + theme_bw()
gbm$bestTune
library(caret)
library(randomForest)
index <- createDataPartition(y = df$target, p = 0.8, list = F)
train <- df %>% slice(index)
test <- df %>% slice(-index)
k = 0.5
cutoff=c(k,1-k)
model <- randomForest(
formula = target ~ .,
data = train,
ntree = 100,
cutoff = cutoff
)
pred <- predict(model, test)
confusionMatrix(pred, test$target)
library(ExamPAData)
library(tidyverse)
library(rpart)
library(rpart.plot)
tree <- rpart(charges ~ smoker + bmi, data = health_insurance)
rpart.plot(tree, type = 3)
library(scales)
library(kableExtra)
health_insurance %>%
mutate(bmi_30 = ifelse(bmi < 30, "bmi < 30", "bmi >= 30")) %>%
group_by(smoker,bmi_30) %>%
summarise(mean_claims = dollar(mean(charges)),
n = n()) %>%
ungroup() %>%
mutate(percent = round(n/sum(n),2)) %>%
select(-n) %>%
kable("markdown")
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.003))
rpart.plot(tree, type = 3)
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.0001))
cost <- tree$cptable %>%
as_tibble() %>%
select(nsplit, CP, xerror)
cost %>% head()
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"y", "n")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_bw() +
theme(legend.position = "none") +
scale_color_manual(values = c("black", "red")) +
annotate("text", x = 25, y = 0.17, label = "Minimum Error", color = "red")
tree$cptable %>%
as_tibble() %>%
select(nsplit, CP, xerror) %>%
arrange(xerror) %>%
head()
pruned_tree <- prune(tree,
cp = tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"])
library(caret)
set.seed(42)
index <- createDataPartition(y = health_insurance$charges,
p = 0.8, list = F)
train <- health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
simple_tree <- rpart(formula = charges ~  .,
data = train,
control = rpart.control(cp = 0.0001,
minbucket = 200,
maxdepth = 10))
rpart.plot(simple_tree, type = 3)
tree_pred <- predict(tree, test)
simple_tree_pred <- predict(simple_tree, test)
get_rmsle <- function(y, y_hat){
sqrt(mean((log(y) - log(y_hat))^2))
}
get_rmsle(test$charges, tree_pred)
get_rmsle(test$charges, simple_tree_pred)
get_rmsle(test$charges, mean(train$charges))
library(randomForest)
tree <- rpart(charges ~ age + bmi, data = health_insurance)
df <- health_insurance %>% mutate(
prediction = predict(tree, health_insurance))
p1 <- df %>%
ggplot(aes(bmi, age, color = prediction)) +
geom_point() +
theme_bw() +
labs(title ="Decision Tree") +
theme(legend.position = "none")
rf <- randomForest(charges ~ age + bmi,
data = health_insurance, ntree = 50)
df <- health_insurance %>% mutate(
prediction = predict(rf, health_insurance))
p2 <- df %>%
ggplot(aes(bmi, age, color = prediction)) +
geom_point() +
theme_bw() +
labs(title ="Random Forest") +
theme(legend.position = "none")
library(ggpubr)
ggarrange(p1,p2)
rf_data <- health_insurance %>%
mutate(sex = ifelse(sex == "male", 1, 0),
smoker = ifelse(smoker == "yes", 1, 0),
region_ne = ifelse(region == "northeast", 1,0),
region_nw = ifelse(region == "northwest", 1,0),
region_se = ifelse(region == "southeast", 1,0),
region_sw = ifelse(region == "southwest", 1,0)) %>%
select(-region)
rf_data %>% glimpse(50)
library(caret)
set.seed(42)
index <- createDataPartition(y = rf_data$charges,
p = 0.8, list = F)
train <- rf_data %>% slice(index)
test <- rf_data %>% slice(-index)
rf <- randomForest(charges ~ ., data = train, ntree = 500)
plot(rf)
pred <- predict(rf, test)
get_rmsle <- function(y, y_hat){
sqrt(mean((log(y) - log(y_hat))^2))
}
get_rmsle(test$charges, pred)
get_rmsle(test$charges, mean(train$charges))
varImpPlot(x = rf)
df <- tibble(x1 = c(1,1,2,2), x2 = c(3,4,5,6)) %>%
mutate(f = 2*x1 + 3*x2)
df
df %>% group_by(x1) %>% summarise(f = mean(f))
library(pdp)
bmi <- pdp::partial(rf, pred.var = "bmi",
grid.resolution = 20) %>%
autoplot() + theme_bw()
age <- pdp::partial(rf, pred.var = "age",
grid.resolution = 20) %>%
autoplot() + theme_bw()
ggarrange(bmi, age)
library(gbm)
gbm <- gbm(charges ~ ., data = train,
n.trees = 100,
interaction.depth = 2,
n.minobsinnode = 50,
shrinkage = 0.1)
pred <- predict(gbm, test, n.trees = 100)
get_rmsle(test$charges, pred)
get_rmsle(test$charges, mean(train$charges))
library(ExamPAData)
library(tidyverse)
set.seed(42)
index <- createDataPartition(y = health_insurance$charges,
p = 0.8, list = F)
train <- health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
tunegrid <- expand.grid(
interaction.depth = c(1,5, 10),
n.trees = c(100, 200, 300, 400, 500),
shrinkage = c(0.5, 0.1, 0.0001),
n.minobsinnode = c(5, 30, 100)
)
nrow(tunegrid)
control <- trainControl(
method='repeatedcv',
number=5,
p = 0.8)
gbm <- train(charges ~ .,
data = train,
method='gbm',
tuneGrid=tunegrid,
trControl=control,
#Show detailed output
verbose = FALSE
)
pdp::partial(gbm, pred.var = "bmi", grid.resolution = 20, plot = T)
pdp::partial(gbm, pred.var = "bmi", grid.resolution = 20, plot = T, ice = T, alpha = 0.1)
pdp::partial(gbm, pred.var = "bmi", grid.resolution = 30, plot = T, ice = T, alpha = 0.1)
pdp::partial(gbm, pred.var = "bmi", grid.resolution = 30, plot = T, ice = T, alpha = 0.1, probs = 1:10)
pdp::partial(gbm, pred.var = "bmi", grid.resolution = 30, plot = T, ice = T, alpha = 0.1, quantiles = T)
pdp::partial(gbm, pred.var = "bmi", grid.resolution = 30, plot = T, alpha = 0.1, quantiles = T)
pdp::partial(gbm, pred.var = "bmi", grid.resolution = 30, plot = T, ice = T, alpha = 0.1, palette = "viridis")
