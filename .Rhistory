index <- createDataPartition(y = df$target, p = 0.8, list = F)
train <- df %>% slice(index)
test <- df %>% slice(-index)
k = 0.1
cutoff=c(k,1-k)
model <- randomForest(
formula = target ~ .,
data = train,
ntree = 100,
cutoff = cutoff
)
pred <- predict(model, test)
confusionMatrix(pred, test$target)
?createDataPartition
?downSample
down_train <- downSample(x = train %>% select(-target),
y = train$target)
down_train
table(down_train)
down_train %>% count(target)
down_train %>% head()
down_train %>% count(Class)
model <- randomForest(
formula = target ~ .,
data = down_train,
ntree = 100,
cutoff = cutoff
)
model <- randomForest(
formula = Class ~ .,
data = down_train,
ntree = 100,
cutoff = cutoff
)
down_pred <- predict(model, test)
confusionMatrix(down_pred, down_train$Class)
down_test <- downSample(x = test %>% select(-target),
y = test$target)
down_pred <- predict(model, down_test)
confusionMatrix(down_pred, down_test$Class)
auc(as.numeric(test$target), as.numeric(pred))
auc(as.numeric(down_test$Class), as.numeric(down_pred))
down_pred
summary(down_pred)
summary(down_test$Class)
auc(down_test$Class, down_pred)
auc(as.numeric(down_test$Class), as.numeric(down_pred))
up_train <- upSample(x = train %>% select(-target),
y = train$target)
up_test <- upSample(x = test %>% select(-target),
y = test$target)
up_train %>% count(Class)
model <- randomForest(
formula = Class ~ .,
data = up_train,
ntree = 100,
cutoff = cutoff
)
up_pred <- predict(model, up_test)
confusionMatrix(up_pred, up_test$Class)
auc(as.numeric(up_test$Class), as.numeric(up_pred))
as.numeric(up_test$Class) %>% str()
as.numeric(up_test$Class) %>% summary()
summary(up_test$Class)
str(up_test$Class)
m <- confusionMatrix(up_pred, up_test$Class)
m$table
m
confusionMatrix(up_pred, up_test$Class)
?downSample
set.seed(42)
index <- createDataPartition(y = health_insurance$charges, p = 0.8, list = F) %>% as.numeric()
health_insurance_train <-  health_insurance %>% slice(index)
health_insurance_test <- health_insurance %>% slice(-index)
#3-fold CV repeated 2 times
control <- trainControl(method='repeatedcv', number=3,repeats=2)
mtry <- sqrt(ncol(health_insurance))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = health_insurance_train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
print(rf)
pred_train <- predict(rf, train)
set.seed(42)
index <- createDataPartition(y = health_insurance$charges, p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
#3-fold CV repeated 2 times
control <- trainControl(method='repeatedcv', number=3,repeats=2)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
print(rf)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
mean((y - y_hat)^2)
}
get_rmse()
get_rmse(pred_train, train$charges)
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
tungrid
tunegrid
#3-fold CV repeated 2 times
control <- trainControl(method='repeatedcv', number=2,repeats=2)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
print(rf)
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
pred_test <- predict(rf, test)
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
#3-fold CV repeated 2 times
control <- trainControl(method='repeatedcv', number=5,repeats=5)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
print(rf)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
?trainControl
#3-fold CV repeated 2 times
control <- trainControl(method='repeatedcv', number=2, p = 0.5, maximize = T)
?trainControl
#3-fold CV repeated 2 times
control <- trainControl(
method='repeatedcv',
number=2,
p = 0.5,
maximize = T,
selectionFunction = best(train, "RMSE", maximize = T))
?trainControl
?trainControl
#3-fold CV repeated 2 times
control <- trainControl(
method='repeatedcv',
number=2,
p = 0.5,
selectionFunction = best(train, "RMSE", maximize = T))
?trainControl
?trainControl
#3-fold CV repeated 2 times
control <- trainControl(
method='boot',
number=2,
p = 0.5)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
print(rf)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
print(rf)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
#3-fold CV repeated 2 times
control <- trainControl(
method='boot',
number=10,
p = 0.8)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
print(rf)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
set.seed(42)
index <- createDataPartition(y = health_insurance$charges, p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
#3-fold CV repeated 2 times
control <- trainControl(
method='boot',
number=2,
p = 0.5)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
print(rf)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
set.seed(42)
index <- createDataPartition(y = health_insurance$charges, p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
#3-fold CV repeated 2 times
control <- trainControl(
method='boot',
number=10,
p = 0.8)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
set.seed(42)
index <- createDataPartition(y = health_insurance$charges, p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
#3-fold CV repeated 2 times
control <- trainControl(
method='boot',
number=2,
p = 0.5)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
set.seed(42)
index <- createDataPartition(y = health_insurance$charges, p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
#3-fold CV repeated 2 times
control <- trainControl(
method='boot',
number=2,
p = 0.2)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
set.seed(42)
index <- createDataPartition(y = health_insurance$charges, p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
#3-fold CV repeated 2 times
control <- trainControl(
method='boot',
number=3,
p = 0.2)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
control <- trainControl(
method='repeatedcv',
number=10,
p = 0.8)
control <- trainControl(
method='boot',
number=3,
p = 0.2)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
control <- trainControl(
method='boot',
number=10,
p = 0.75)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
control <- trainControl(
method='boot',
number=10,
p = 0.75)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
control <- trainControl(
method='repeatedcv',
number=10,
p = 0.8)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
control <- trainControl(
method='boot',
number=10,
p = 0.75)
mtry <- sqrt(ncol(train))
tunegrid <- expand.grid(.mtry=mtry)
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
tunegrid
set.seed(42)
index <- createDataPartition(y = health_insurance$charges, p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
#bad
control <- trainControl(
method='boot',
number=2,
p = 0.2)
tunegrid <- expand.grid(.mtry=c(1,3,5))
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
control <- trainControl(
method='boot',
number=10,
p = 0.75)
tunegrid <- expand.grid(.mtry=c(1,3,5))
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
#best
control <- trainControl(
method='boot',
number=10,
p = 0.75)
tunegrid <- expand.grid(.mtry=c(1,3,5))
rf <- train(charges ~ .,
data = train,
method='rf',
tuneGrid=tunegrid,
trControl=control)
pred_train <- predict(rf, train)
pred_test <- predict(rf, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred_train, train$charges)
get_rmse(pred_test, test$charges)
library(randomForest)
tree <- rpart(charges ~ age + bmi, data = health_insurance)
df <- health_insurance %>% mutate(
prediction = predict(tree, health_insurance))
p1 <- df %>%
ggplot(aes(bmi, age, color = prediction)) +
geom_point() +
scale_color_viridis_c() +
theme_bw() +
labs(title ="Decision Tree") +
theme(legend.position = "none")
rf <- randomForest(charges ~ age + bmi, data = health_insurance, ntree = 50)
df <- health_insurance %>% mutate(
prediction = predict(rf, health_insurance))
p2 <- df %>%
ggplot(aes(bmi, age, color = prediction)) +
geom_point() +
scale_color_viridis_c() +
theme_bw() +
labs(title ="Random Forest") +
theme(legend.position = "none")
library(ggpubr)
ggarrange(p1,p2)
library(rpart)
library(rpart.plot)
tree <- rpart(charges ~ smoker + bmi, data = health_insurance)
rpart.plot(tree, type = 3)
rm(list = ls())
