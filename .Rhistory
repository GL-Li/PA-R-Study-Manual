rename(full_data = std.error.x, test_data = std.error.y) %>%
kable("html")
library(kableExtra)
model_full_data %>% tidy() %>%
select(term, std.error) %>%
left_join(model_test_data %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data = std.error.x, test_data = std.error.y) %>%
kable("html")
model_full_data %>% tidy() %>%
select(term, std.error) %>%
left_join(model_test_data %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data = std.error.x, test_data = std.error.y) %>%
mutate_if(is.numeric, ~round(.x, 1))
library(broom)
library(kableExtra)
model_full_data <- lm(data = health_insurance, formula = charges ~ bmi + age)
model_test_data <-  lm(data = health_insurance_train, formula = charges ~ bmi + age)
model_full_data %>% tidy() %>%
select(term, std.error) %>%
left_join(model_test_data %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data_std_error = std.error.x, test_data_std_error = std.error.y) %>%
mutate_if(is.numeric, ~round(.x, 1))
kable("html")
model_full_data <- lm(data = health_insurance, formula = charges ~ bmi + age)
model_test_data <-  lm(data = health_insurance_train, formula = charges ~ bmi + age)
library(broom)
library(kableExtra)
model_full_data %>% tidy() %>%
select(term, std.error) %>%
left_join(model_test_data %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data_std_error = std.error.x, test_data_std_error = std.error.y) %>%
mutate_if(is.numeric, ~round(.x, 1))
kable("html")
model_full_data
summary(model_full_data)
kableExtra::kable("html")
kableExtra::kable()
model_full_data %>% tidy() %>%
select(term, std.error) %>%
left_join(model_test_data %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data_std_error = std.error.x, test_data_std_error = std.error.y) %>%
mutate_if(is.numeric, ~round(.x, 1)) %>%
kableExtra::kable("html")
coefficients(model_full_data)
plot(model)
model <- lm(data = health_insurance_train, formula = charges ~ bmi + age)
pred = predict(model, health_insurance_test)
plot(model)
plot(model)[1]
plot(model)[[1]]
residual = resid(model)
tibble(residual, pred)
plot(model)
plot(model, which = 1)
plot(model, which = 2)
interactions
library(ExamPAData)
interactions
interactions %>%
ggplot(aes(age, actual, color = gender)) +
geom_line()
library(tidyverse)
interactions %>%
ggplot(aes(age, actual, color = gender)) +
geom_line()
interactions %>%
ggplot(aes(age, actual, color = gender)) +
geom_line() +
theme_minimal()
auto_claim
tree <- rpart(data = auto_claim,  CLM_AMTS ~ CAR_USE + CAR_TYPE + AGE + HOME_VAL + AREA)
library(rpart)
tree <- rpart(data = auto_claim,  CLM_AMTS ~ CAR_USE + CAR_TYPE + AGE + HOME_VAL + AREA)
tree <- rpart(data = auto_claim,  formula = CLM_AMTS ~ CAR_USE + CAR_TYPE + AGE + HOME_VAL + AREA)
auto_claim
tree <- rpart(data = auto_claim,  formula = CLM_AMT5 ~ CAR_USE + CAR_TYPE + AGE + HOME_VAL + AREA)
library(rpart.plot)
tree
plot(tree)
rpart.plot(tree)
tree <- rpart(data = auto_claim,  formula = CLM_AMT5 ~ CAR_USE + CAR_TYPE + AGE + HOME_VAL + AREA + BLUEBOOK)
rpart.plot(tree)
auto_claim %>%
ggplot(aes(CLM_AMT, BLUEBOOK)) +
geom_point()
auto_claim %>%
ggplot(aes(CLM_AMT, BLUEBOOK, color = CAR_USE)) +
geom_point()
auto_claim %>%
ggplot(aes(CLM_AMT, BLUEBOOK, color = CAR_TYPE)) +
geom_point()
auto_claim %>%
ggplot(aes(CLM_AMT, BLUEBOOK, color = CAR_TYPE)) +
geom_point() +
geom_smooth(method = "lm")
auto_claim %>%
ggplot(aes(CLM_AMT, BLUEBOOK, color = CAR_TYPE)) +
geom_point() +
geom_smooth(method = "lm", se = F)
auto_claim %>%
ggplot(aes(CLM_AMT, BLUEBOOK, color = CAR_TYPE)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
theme_minimal()
auto_claim %>%
ggplot(aes(log(CLM_AMT), log(BLUEBOOK), color = CAR_TYPE)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
theme_minimal()
auto_claim %>%
ggplot(aes(log(CLM_AMT), log(BLUEBOOK), color = CAR_TYPE)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
theme_minimal()  +
labs(title = "Kelly Bluebook Value vs Claim Amount",
subtitle = "Interactions imply different slopes",
caption= "data: auto_claim")
interactions %>%
ggplot(aes(log(age), log(actual), color = gender)) +
geom_line() +
theme_minimal()
interactions %>%
ggplot(aes(age, actual, color = gender)) +
geom_line() +
theme_minimal()
interactions %>%
ggplot(aes(age, actual, color = gender)) +
geom_line() +
theme_minimal()
interactions %>%
ggplot(aes(age, actual, color = gender)) +
geom_line() +
theme_minimal() +
interactions %>%
ggplot(aes(age, actual, color = gender)) +
geom_line() +
theme_minimal() +
labs(title = "Kelly Bluebook Value vs Claim Amount",
subtitle = "Interactions imply different slopes",
caption= "data: auto_claim")
interactions %>%
ggplot(aes(age, actual, color = gender)) +
geom_line() +
theme_minimal() +
labs(title = "Kelly Bluebook Value vs Claim Amount",
subtitle = "Interactions imply different slopes",
caption= "data: auto_claim")
interactions %>%
ggplot(aes(age, actual, color = gender)) +
geom_line() +
theme_minimal() +
labs(title = "Age vs. Actual by Gender",
subtitle = "Interactions imply different slopes",
caption= "data: interactions")
auto_claim %>%
ggplot(aes(log(CLM_AMT), log(BLUEBOOK), color = CAR_TYPE)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
theme_minimal()  +
labs(title = "Kelly Bluebook Value vs Claim Amount",
subtitle = "Interactions imply different slopes",
caption= "data: auto_claim")
model <- glm(data = auto_claim,
formula = log(CLM_AMT) ~ log(BLUEBOOK) + CAR_TYPE + CAR_TYPE*log(BLUEBOOK))
model <- glm(data = auto_claim %>% filter(CLM_AMT > 0),
formula = log(CLM_AMT) ~ log(BLUEBOOK) + CAR_TYPE + CAR_TYPE*log(BLUEBOOK))
summary(model)
auto_claim
model <- glm(
log(CLM_FRQ5) ~ log(BLUEBOOK) + log(AGE) + CAR_TYPE + AREA,
data = auto_claim
)
model <- glm(
formula = log(CLM_FRQ5) ~ log(BLUEBOOK) + log(AGE) + CAR_TYPE + AREA,
data = auto_claim
)
auto_claim
model <- glm(
formula = log(CLM_FREQ5) ~ log(BLUEBOOK) + log(AGE) + CAR_TYPE + AREA,
data = auto_claim
)
model <- glm(
formula = CLM_FREQ5 ~ log(BLUEBOOK) + log(AGE) + CAR_TYPE + AREA,
data = auto_claim,
family = "Poisson"
)
model <- glm(
formula = CLM_FREQ5 ~ log(BLUEBOOK) + log(AGE) + CAR_TYPE + AREA,
data = auto_claim,
family = poisson
)
auto_claim
model
auto_claim
insurance
tinytex::install_tinytex()
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
library(rpart)
library(rpart.plot)
library(tidyverse)
tree <- rpart(charges ~ smoker + bmi, data = health_insurance)
rpart.plot(tree, type = 3)
tree <- rpart(charges ~ smoker + bmi + sex + region, data = health_insurance)
rpart.plot(tree, type = 3)
tree <- rpart(charges ~ ., data = health_insurance)
rpart.plot(tree, type = 3)
auto_claim
library(ExamPAData)
auto_claim
tree <- rpart(CLM_FREQ5 ~ CARE_USE + BLUEBOOK + CAR_TYPE + TRAVTIME, data = auto_claim)
tree <- rpart(formula = CLM_FREQ5 ~ CARE_USE + BLUEBOOK + CAR_TYPE + TRAVTIME, data = auto_claim)
tree <- rpart(formula = CLM_FREQ5 ~ CARE_USE + BLUEBOOK + CAR_TYPE + TRAVTIME, data = auto_claim)
auto_claim %>% class()
tree <- rpart(formula = CLM_FREQ5 ~  BLUEBOOK + CAR_TYPE + TRAVTIME, data = auto_claim)
rpart.plot(tree, type = 3)
tree <- rpart(formula = ., data = auto_claim)
tree <- rpart(formula = CLM_FREQ5 ~  ., data = auto_claim)
rpart.plot(tree, type = 3)
names(auto_claim)
tree <- rpart(formula = CLM_FREQ5 ~  BLUEBOOK + MAX_EDUC + AGE + HOME_VAL + AREA, data = auto_claim)
rpart.plot(tree, type = 3)
tree <- rpart(formula = CLM_FREQ5 ~  BLUEBOOK + MAX_EDUC + AGE + HOME_VAL + AREA + TRAVTIME + JOBCLASS, data = auto_claim)
rpart.plot(tree, type = 3)
rpart.plot(tree)
rpart.plot(tree, type = 3)
tree <- rpart(formula = CLM_FREQ5 ~  BLUEBOOK + MAX_EDUC + AGE + HOME_VAL + AREA + TRAVTIME + JOBCLASS + SAMEHOME + IN_YY, data = auto_claim)
rpart.plot(tree, type = 3)
?rpart
tree <- rpart(formula = CLM_FREQ5 ~  BLUEBOOK + MAX_EDUC + AGE + HOME_VAL + AREA + TRAVTIME + JOBCLASS + SAMEHOME + IN_YY, data = auto_claim,
control = rpart.control(cp = 0.05))
rpart.plot(tree, type = 3)
tree <- rpart(formula = CLM_FREQ5 ~  BLUEBOOK + MAX_EDUC + AGE + HOME_VAL + AREA + TRAVTIME + JOBCLASS + SAMEHOME + IN_YY, data = auto_claim,
control = rpart.control(cp = 0))
rpart.plot(tree, type = 3)
tree <- rpart(formula = CLM_FREQ5 ~  BLUEBOOK + MAX_EDUC + AGE + HOME_VAL + AREA + TRAVTIME, data = auto_claim,
control = rpart.control(cp = 0))
rpart.plot(tree, type = 3)
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0))
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0))
rpart.plot(tree, type = 3)
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.01))
rpart.plot(tree, type = 3)
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.0001))
rpart.plot(tree, type = 3)
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.001))
rpart.plot(tree, type = 3)
names(health_insurance)
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.005))
rpart.plot(tree, type = 3)
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.003))
rpart.plot(tree, type = 3)
summary(health_insurance$age)
tree$cptable
tree$cptable %>% tible()
tree$cptable %>% as_tible()
library(tidyverse)
tree$cptable %>% as_tible()
tree$cptable %>% as_tibble()
tree$cptable %>% as_tibble() %>% select(nsplit, CP)
tree <- rpart(formula = charges ~  smoker, data = health_insurance)
tree$cptable
tree$cptable %>% as_tibble() %>% select(nsplit, CP)
tree <- rpart(formula = charges ~  smoker, data = health_insurance)
tree$cptable %>% as_tibble() %>% select(nsplit, CP)
library(tidyverse)
tree$cptable %>% as_tibble() %>% select(nsplit, CP)
prune_tree <- prune(tree,cp = tree$cptable[which.min(tree.reduced$cptable[, "xerror"]), "CP"])
tree$cptable %>% as_tibble() %>% select(nsplit, CP)
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.003))
rpart.plot(tree, type = 3)
tree$cptable %>% as_tibble() %>% select(nsplit, CP)
tree$cptable %>% as_tibble() %>% select(nsplit, CP)
tree$cptable %>% as_tibble() %>% select(nsplit, CP) %>% mutate(CP = round(CP,2))
tree$cptable %>% as_tibble() %>% select(nsplit, CP) %>% mutate(CP = round(CP,3))
tree <- rpart(formula = charges ~  smoker, data = health_insurance)
tree$cptable %>% as_tibble() %>% select(nsplit, CP) %>% mutate(CP = round(CP,3))
tree$cptable %>% as_tibble() %>% select(nsplit, CP, xerror) %>% mutate(CP = round(CP,3))
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.003))
rpart.plot(tree, type = 3)
library(tidyverse)
tree$cptable %>% as_tibble() %>% select(nsplit, CP, xerror) %>% mutate(CP = round(CP,3))
tree$cptable %>% as_tibble() %>% select(nsplit, CP, xerror) %>% mutate_if(is.numeric, ~round(.x,3))
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.001))
rpart.plot(tree, type = 3)
library(tidyverse)
tree$cptable %>% as_tibble() %>% select(nsplit, CP, xerror) %>% mutate_if(is.numeric, ~round(.x,3))
library(kableExtra)
library(tidyverse)
tree$cptable %>%
as_tibble() %>%
select(nsplit, CP, xerror) %>%
mutate_if(is.numeric, ~round(.x,3)) %>%
kable("html")
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.003))
rpart.plot(tree, type = 3)
library(kableExtra)
library(tidyverse)
tree$cptable %>%
as_tibble() %>%
select(nsplit, CP, xerror) %>%
mutate_if(is.numeric, ~round(.x,3)) %>%
kable("html")
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.0001))
library(kableExtra)
library(tidyverse)
tree$cptable %>%
as_tibble() %>%
select(nsplit, CP, xerror) %>%
mutate_if(is.numeric, ~round(.x,3)) %>%
kable("html")
cost <- tree$cptable %>%
as_tibble() %>%
select(nsplit, CP, xerror)
cost %>% head()
cost %>%
ggplot(aes(nsplit, xerror)) +
geom_point()
cost %>%
ggplot(aes(nsplit, xerror)) +
geom_line()
cost %>%
ggplot(aes(nsplit, xerror)) +
geom_line() +
geom_point() +
theme_minimal()
cost %>%
filter(nsplit > 1) %>%
ggplot(aes(nsplit, xerror)) +
geom_line() +
geom_point() +
theme_minimal()
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror = min(cost$xerror),"min", "")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_minimal()
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror = min(cost$xerror),"min", "x")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_minimal()
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"min", "x")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_minimal()
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"y", "n")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_minimal() +
theme(guides = F)
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"y", "n")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_minimal() +
theme(legend = element_blank())
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"y", "n")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_minimal() +
theme(legend.position = "none")
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"y", "n")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_manual(values = c("black", "red"))
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"y", "n")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_manual(values = c("black", "red")) +
annotate("Minimum Error", x = 20, y = 0.2)
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"y", "n")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_manual(values = c("black", "red")) +
annotate(text ="Minimum Error", x = 20, y = 0.2)
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"y", "n")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_manual(values = c("black", "red")) +
annotate("text", x = 20, y = 0.2, label = "Minimum Error")
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"y", "n")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_manual(values = c("black", "red")) +
annotate("text", x = 22, y = 0.18, label = "Minimum Error", color = "red")
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"y", "n")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_manual(values = c("black", "red")) +
annotate("text", x = 25, y = 0.17, label = "Minimum Error", color = "red")
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"y", "n")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_minimal() +
theme(legend.position = "none") +
scale_color_manual(values = c("black", "red")) +
annotate("text", x = 25, y = 0.17, label = "Minimum Error", color = "red")
auto_claim %>%
ggplot(aes(log(CLM_AMT), log(BLUEBOOK), color = CAR_TYPE)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = F) +
theme_minimal()  +
labs(title = "Kelly Bluebook Value vs Claim Amount")
auto_claim %>%
ggplot(aes(log(CLM_AMT), log(BLUEBOOK), color = CAR_TYPE)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", se = F) +
theme_minimal()  +
labs(title = "Kelly Bluebook Value vs Claim Amount")
pruned_tree <- prune(tree,cp = tree.reduced$cptable[which.min(tree.reduced$cptable[, "xerror"]), "CP"])
pruned_tree <- prune(tree,cp = tree$cptable[which.min(tree.reduced$cptable[, "xerror"]), "CP"])
cost %>% head() %>% kable("html")
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.001))
rpart.plot(tree, type = 3)
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.003))
rpart.plot(tree, type = 3)
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.003))
rpart.plot(tree, type = 3)
options(tinytex.verbose = TRUE)
library(caret)
#create a train/test split
index <- createDataPartition(y = health_insurance$charges, p = 0.8, list = F) %>% as.numeric()
health_insurance_train <-  health_insurance %>% slice(index)
health_insurance_test <- health_insurance %>% slice(-index)
health_insurance %>%
mutate(bmi_30 = ifelse(bmi < 30, "bmi < 30", "bmi >= 30")) %>%
group_by(smoker,bmi_30) %>%
summarise(mean_claims = dollar(mean(charges)),
n = n()) %>%
ungroup() %>%
mutate(percent = round(n/sum(n),2)) %>%
select(-n) %>%
kable("markdown")
library(scales)
library(kableExtra)
health_insurance %>%
mutate(bmi_30 = ifelse(bmi < 30, "bmi < 30", "bmi >= 30")) %>%
group_by(smoker,bmi_30) %>%
summarise(mean_claims = dollar(mean(charges)),
n = n()) %>%
ungroup() %>%
mutate(percent = round(n/sum(n),2)) %>%
select(-n) %>%
kable("markdown")
publish_book()
library(bookdown)
publish_book()
publish_book()
