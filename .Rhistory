formula = charges ~ bmi + age)
library(broom)
library(kableExtra)
all_data %>% tidy() %>%
select(term, std.error) %>%
left_join(testing %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data_std_error = std.error.x, test_data_std_error = std.error.y) %>%
mutate_if(is.numeric, ~round(.x, 1)) %>%
kableExtra::kable("markdown")
coefficients(model)
tibble(y = exp(rnorm(1000))) %>%
mutate(log_y = log(y)) %>%
gather(stat, value) %>%
mutate(stat = ifelse(stat == "y", "Before Log Transform", "After Log Transform") %>%
fct_relevel(c("Before Log Transform", "After Log Transform"))) %>%
ggplot(aes(value)) +
geom_histogram() +
facet_wrap(vars(stat), scales = "free")
knitr::include_graphics("images/glm_links.png")
model = glm(formula = charges ~ age + sex + children,
family = Gamma(link = "log"),
data = health_insurance)
library(ExamPAData)
names(health_insurance)
library(ggplot2)
theme_set(theme_bw())
library(tidyverse)
tibble(y = rnorm(10, 0, 1),
x = y + 0.4*rnorm(10,0, 1)) %>%
ggplot(aes(x,y)) +
geom_point( show.legend = F) +
geom_smooth(method = "lm", se = F, aes(fill = "linear regression"), color = "red", show.legend = T) +
scale_fill_manual(name="legend", values=c("blue", "red")) +
theme(legend.position = "top")
library(ExamPAData)
library(tidyverse)
model <- lm(data = health_insurance, formula = charges ~ bmi + age)
summary(model)
library(caret)
#create a train/test split
index <- createDataPartition(y = health_insurance$charges,
p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
model <- lm(data = train, formula = charges ~ bmi + age)
pred = predict(model, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred, test$charges)
get_rmse(mean(test$charges), test$charges)
plot(model, which = 1)
plot(model, which = 2)
all_data <- lm(data = health_insurance,
formula = charges ~ bmi + age)
testing <- lm(data = test,
formula = charges ~ bmi + age)
library(broom)
library(kableExtra)
all_data %>% tidy() %>%
select(term, std.error) %>%
left_join(testing %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data_std_error = std.error.x, test_data_std_error = std.error.y) %>%
mutate_if(is.numeric, ~round(.x, 1)) %>%
kableExtra::kable("markdown")
coefficients(model)
tibble(y = exp(rnorm(1000))) %>%
mutate(log_y = log(y)) %>%
gather(stat, value) %>%
mutate(stat = ifelse(stat == "y", "Before Log Transform", "After Log Transform") %>%
fct_relevel(c("Before Log Transform", "After Log Transform"))) %>%
ggplot(aes(value)) +
geom_histogram() +
facet_wrap(vars(stat), scales = "free")
knitr::include_graphics("images/glm_links.png")
model = glm(formula = charges ~ age + sex + children,
family = Gamma(link = "log"),
data = health_insurance)
names(health_insurance)
model = glm(formula = charges ~ age + sex + smoker,
family = Gamma(link = "log"),
data = health_insurance)
library(ExamPAData)
actuary_salaries %>% glimpse()
actuary_salaries %>% count(industry)
#method 1
actuary_salaries <- actuary_salaries %>%
mutate(salary_high = as.numeric(salary_high))
#method 2
actuary_salaries <- actuary_salaries %>%
modify_at("salary_high", as.numeric)
actuary_salaries %>%
filter(industry == "Health", exams == 5) %>%
summarise(highest = max(salary_high),
lowest = min(salary_low))
actuary_salaries %>%
filter(industry == "Health", exams == 5)
actuary_salaries %>% count(exams)
actuary_salaries %>% filter((exams == 5 | exams == "5 exams"))
actuary_salaries %>% filter(exams == "5 exams")
actuary_salaries %>% count(exams)
actuary_salaries %>% filter((exams == 5 | Exams == "5 exams"))
actuary_salaries %>% filter((exams == 5 | exams == "5 Exams"))
library(ExamPAData)
library(tidyverse)
library(ExamPAData)
set.seed(1234)
health_insurance %>% glimpse()
health_insurance %>% summary()
health_insurance %>%
mutate(region = as.factor(region),
smoker = as.factor(smoker)) %>%
summary()
library(tidyverse)
library(ExamPAData)
set.seed(1234)
health_insurance %>% glimpse()
health_insurance %>% summary()
health_insurance %>%
mutate(region = as.factor(region),
smoker = as.factor(smoker)) %>%
summary()
health_insurance %>%
ggplot(aes(charges)) +
geom_histogram()
health_insurance$charges %>% summary()
health_insurance %>%
ggplot(aes(charges)) +
geom_histogram() +
facet_wrap(vars(region))
# Chunk 1
library(tidyverse)
library(ExamPAData)
set.seed(1234)
health_insurance %>% glimpse()
health_insurance %>% summary()
health_insurance %>%
mutate(region = as.factor(region),
smoker = as.factor(smoker)) %>%
summary()
# Chunk 2
health_insurance %>%
ggplot(aes(charges)) +
geom_histogram()
health_insurance$charges %>% summary()
# Chunk 3
health_insurance %>%
ggplot(aes(charges)) +
geom_histogram() +
facet_wrap(vars(region))
# Chunk 4
health_insurance %>%
filter(region == "northwest") %>%
ggplot(aes(charges)) +
geom_histogram()
# Chunk 5
health_insurance <- health_insurance %>%
mutate(age_bucket = case_when(age < 24 ~ 1,
age <= 36 ~ 2,
age <= 50 ~ 3,
age > 50 ~ 4),
age_household_ratio = (1 + children)/age,
log_household_size = log(1 + children)) %>%
select(-children)
# Chunk 6
library(caret)
#create a train/test split
index <- createDataPartition(y = health_insurance$charges, list = F, p = 0.8) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
nrow(train) + nrow(test) == nrow(health_insurance)
nrow(train)/nrow(health_insurance)
# Chunk 7
get_rmsle <- function(y, y_hat){
sqrt(mean((log(y/y_hat))^2))
}
health_insurance %>% ggplot(aes(log(charges))) + geom_histogram()
model = glm(formula = charges ~ .,
family = gaussian(link = "log"),
data = train)
pred = predict(model, test, type = "response")
get_rmsle(pred, test$charges)
model = glm(formula = charges ~ .,
family = Gamma(link = "log"),
data = train)
pred = predict(model, test, type = "response")
get_rmsle(pred, test$charges)
model = glm(formula = charges ~ .,
family = inverse.gaussian(link = "log"),
data = train)
pred = predict(model, test, type = "response")
get_rmsle(pred, test$charges)
model = glm(formula = charges ~ .,
family = inverse.gaussian(link = "log"),
data = train)
pred = predict(model, test, type = "response")
get_rmsle(pred, test$charges)
model = glm(formula = charges ~ age + sex + bmi + smoker + (region=="southeast") + (region=="southwest"),
family = Gamma(link = "log"),
data = train)
pred = predict(model, test, type = "response")
get_rmsle(pred, test$charges)
summary(model)
levels(train$sex)
model = glm(formula = charges ~ age + sex + bmi + smoker + (region=="southeast") + (region=="southwest"),
family = Gamma(link = "log"),
data = train)
pred = predict(model, test, type = "response")
get_rmsle(pred, test$charges)
summary(model)
model = glm(formula = charges ~ age + bmi + smoker + (region=="southeast") + (region=="southwest"),
family = Gamma(link = "log"),
data = train)
pred = predict(model, test, type = "response")
get_rmsle(pred, test$charges)
summary(model)
sim_norm <- function(x) {
rnorm(1, mean = exp(10 + x), sd = 1)
}
data <- tibble(x = runif(1000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
set.seed(1)
library(ggplot2)
theme_set(theme_bw())
library(tidyverse)
tibble(y = rnorm(10, 0, 1),
x = y + 0.4*rnorm(10,0, 1)) %>%
ggplot(aes(x,y)) +
geom_point( show.legend = F) +
geom_smooth(method = "lm", se = F, aes(fill = "linear regression"), color = "red", show.legend = T) +
scale_fill_manual(name="legend", values=c("blue", "red")) +
theme(legend.position = "top")
library(ExamPAData)
library(tidyverse)
model <- lm(data = health_insurance, formula = charges ~ bmi + age)
summary(model)
set.seed(1)
library(caret)
#create a train/test split
index <- createDataPartition(y = health_insurance$charges,
p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
model <- lm(data = train, formula = charges ~ bmi + age)
pred = predict(model, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred, test$charges)
get_rmse(mean(test$charges), test$charges)
plot(model, which = 1)
plot(model, which = 2)
all_data <- lm(data = health_insurance,
formula = charges ~ bmi + age)
testing <- lm(data = test,
formula = charges ~ bmi + age)
library(broom)
library(kableExtra)
all_data %>% tidy() %>%
select(term, std.error) %>%
left_join(testing %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data_std_error = std.error.x, test_data_std_error = std.error.y) %>%
mutate_if(is.numeric, ~round(.x, 1)) %>%
kableExtra::kable("markdown")
coefficients(model)
knitr::include_graphics("images/glm_links.png")
model = glm(formula = charges ~ age + sex + smoker,
family = Gamma(link = "log"),
data = health_insurance)
model %>% tidy()
plot(model, which = 3)
plot(model, which = 2)
sim_norm <- function(x) {
rnorm(1, mean = exp(10 + x), sd = 1)
}
data <- tibble(x = runif(1000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
glm <- glm(y ~ x, family = gaussian(link = "log"), data = data)
summary(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.3, alpha = 0.5)
plot(glm, cex = 0.3)
glm <- glm(y ~ x, family = gaussian(link = "log"), data = data)
summary(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
sim_norm <- function(x) {
rnorm(1, mean = 1/x, 1)
}
data <- tibble(x = runif(10000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
summary(data)
glm <- glm(y ~ x, family = gaussian(link = "inverse"), data = data)
summary(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
sim_norm <- function(x) {
rnorm(1, mean = x, 1)
}
data <- tibble(x = rnorm(10000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
glm <- glm(y ~ x, family = gaussian(link = "identity"), data = data)
summary(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
sim_norm <- function(x) {
rnorm(1, mean = 1/x, 1)
}
data <- tibble(x = runif(10000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
summary(data)
glm <- glm(y ~ x, family = gaussian(link = "inverse"), data = data)
summary(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
sim_norm <- function(x) {
rnorm(1, mean = exp(10 + x), sd = 1)
}
data <- tibble(x = runif(1000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
glm <- glm(y ~ x, family = gaussian(link = "log"), data = data)
summary(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
sim_norm <- function(x) {
rnorm(1, mean = 1/x, 1)
}
data <- tibble(x = runif(10000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
summary(data)
glm <- glm(y ~ x, family = gaussian(link = "inverse"), data = data)
summary(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
glm <- glm(y ~ x, family = gaussian(link = "log"), data = data)
sim_norm <- function(x) {
rnorm(1, mean = x, 1)
}
data <- tibble(x = rnorm(10000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
glm <- glm(y ~ x, family = gaussian(link = "identity"), data = data)
summary(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
sim_norm <- function(x) {
rnorm(1, mean = exp(x), sd = 1)
}
data <- tibble(x = runif(1000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
summary(data)
data %>% ggplot(aes(y)) + geom_density( fill = 1, alpha = 0.3)
data %>% ggplot(aes(y)) + geom_density( fill = 1, alpha = 0.3)
data %>% ggplot(aes(y)) + geom_density( fill = 1, alpha = 0.3)
glm <- glm(y ~ x, family = gaussian(link = "log"), data = data)
tibble(x = seq(-1, 1, 0.01)) %>% mutate( y = ifelse(x < 0, NA, log(x))) %>% ggplot(aes(x,y)) + geom_line(color = "red") + xlab("X") + ylab("log(X)")
glm <- glm(y + 10 ~ x, family = gaussian(link = "log"), data = data)
summary(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
y <- data$y
y_hat <- predict(glm, type = "response")
mean(y_hat) - mean(y)
var(y)
var(y_hat)
data <- tibble(x = rnorm(10000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
glm <- glm(y ~ x, family = gaussian(link = "identity"), data = data)
y <- data$y
y_hat <- predict(glm, type = "response")
var(y)
var(y_hat)
y <- data$y
y_hat <- predict(glm, type = "response")
mean(y_hat) - mean(y)
sim_norm <- function(x) {
rnorm(1, mean = exp(x), sd = 1)
}
data <- tibble(x = runif(1000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
summary(data)
glm <- glm(y + 10 ~ x, family = gaussian(link = "log"), data = data)
summary(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
y <- data$y
y_hat <- predict(glm, type = "response")
mean(y_hat) - mean(y)
tibble(y = y, y_hat = y_hat - 10) %>% ggplot(aes(y, y_hat)) + geom_point()
tibble(y = y, y_hat = y_hat - 10) %>% ggplot(aes(y, y_hat)) + geom_point()
data <- tibble(x = runif(1000) + 10) %>%
mutate(y = x %>% map_dbl(sim_norm))
summary(data)
glm <- glm(y ~ x, family = gaussian(link = "log"), data = data)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
data <- tibble(x = runif(1000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
glm <- glm(y ~ x, family = gaussian(link = "inverse"), data = data)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
summary(glm)
gammas <- rgamma(1000, shape=2, scale = 0.5)
mean(gammas)
#random component
x <- floor(runif(1000, min=0, max=100))
#relate Y to X with a log link function
y <- gammas*exp(x)
data <- tibble(x = x, y  = y)
summary(data)
glm <- glm(y ~ x, family = Gamma(link = "log"), data = data)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
#relate Y to X with a log link function
y <- gammas*1/(x + 1)
data <- tibble(x = x, y  = y)
summary(data)
glm <- glm(y ~ x, family = Gamma(link = "inverse"), data = data)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
#random component
x <- runif(1000, min=0, max=100)
#relate Y to X with a log link function
y <- gammas*exp(x)
#random component
x <- runif(1000, min=0, max=100)
#relate Y to X with a log link function
y <- gammas*exp(x)
data <- tibble(x = x, y  = y)
summary(data)
glm <- glm(y ~ x, family = Gamma(link = "log"), data = data)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
glm <- glm(y ~ x, family = Gamma(link = "inverse"), data = data)
plot(glm)
glm <- glm(y ~ x, family = Gamma(link = "inverse"), data = data)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
#relate Y to X with a log link function
y <- gammas*1/(x + 1)
data <- tibble(x = x, y  = y)
summary(data)
glm <- glm(y ~ x, family = Gamma(link = "inverse"), data = data)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
glm <- glm(y ~ x, family = gaussian(link = "log"), data = data)
tidy(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
sim_norm <- function(x) {
rnorm(1, mean = exp(10 + x), sd = 1)
}
data <- tibble(x = runif(1000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
glm <- glm(y ~ x, family = gaussian(link = "log"), data = data)
tidy(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
install.packages("rsq")
library(rsq)
# Poisson Models
sdata <- simglm(family="poisson",lambda=4)
fitf <- glm(y~x.1+x.2+x.3,family=poisson,data=sdata$yx)
rsq(fitf)  # type='v'
fitr <- glm(y~x.2+x.3,family=poisson,data=sdata$yx)
rsq(fitr)  # type='v'
rsq(fitr,type='kl')
rsq(fitr,type='lr')
rsq(fitr,type='n')
fitf <- glm(y~x.1+x.2+x.3,family=poisson,data=sdata$yx)
plot(fitf)
sim_norm <- function(x) {
rnorm(1, mean = 1/x, 1)
}
data <- tibble(x = runif(10000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
summary(data)
sim_norm <- function(x) {
rnorm(1, mean = exp(10 + x), sd = 1)
}
data <- tibble(x = runif(1000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
glm <- glm(y ~ x, family = gaussian(link = "log"), data = data)
summary(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
sim_norm <- function(x) {
rnorm(1, mean = 1/x, 1)
}
data <- tibble(x = runif(10000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
summary(data)
glm <- glm(y ~ x, family = gaussian(link = "inverse"), data = data)
summary(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
sim_norm <- function(x) {
rnorm(1, mean = x, 1)
}
data <- tibble(x = rnorm(10000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
glm <- glm(y ~ x, family = gaussian(link = "identity"), data = data)
summary(glm)
par(mfrow = c(2,2))
plot(glm, cex = 0.4)
sim_norm <- function(x) {
rnorm(1, mean = exp(x), sd = 1)
}
data <- tibble(x = runif(1000)) %>%
mutate(y = x %>% map_dbl(sim_norm))
summary(data)
data %>% ggplot(aes(y)) + geom_density( fill = 1, alpha = 0.3)
glm <- glm(y ~ x, family = gaussian(link = "log"), data = data)
