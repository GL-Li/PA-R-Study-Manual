LLfunction(test$NUM_INJURIES,predictions2)
average_injuries_per_2000_hrs = train %>%
summarise(mean = sum(NUM_INJURIES)/sum(EMP_HRS_TOTAL)*2000) %>%
unlist() %>% as.numeric()
LLfunction(test$NUM_INJURIES, average_injuries_per_2000_hrs)
LLfunction(test$NUM_INJURIES, 0)
train_dtree = train %>% select(NUM_INJURIES,COMMODITY, SEAM_HEIGHT, TYPE_OF_MINE, MINE_STATUS, AVG_EMP_TOTAL, EMP_HRS_TOTAL, PCT_HRS_UNDERGROUND, PCT_HRS_AUGER, PCT_HRS_CULM_BANK, PCT_HRS_STRIP, PCT_HRS_OFFICE, PCT_HRS_OTHER_SURFACE, PCT_HRS_SHOP_YARD, PCT_HRS_STRIP)
test_dtree <- test %>% select(names(train_dtree))
tree <- rpart(cbind(EMP_HRS_TOTAL/2000, NUM_INJURIES) ~ . - EMP_HRS_TOTAL,
data = train_dtree,
method = "poisson",
control = rpart.control(minbucket = 10,
cp = 0.005,
maxdepth = 20))
plotcp(tree)
pruned_tree <- prune(tree, cp = tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"])
rpart.plot(pruned_tree)
printcp(pruned_tree)
predictions_unweighted <- predict(pruned_tree, newdata = test_dtree, type = "vector")
predictions2 = predictions_unweighted*(test_dtree$EMP_HRS_TOTAL/2000)
pruned_tree$cptable
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(tidyverse)
mtcars %>% head()
mtcars
mtcars %>% as_tibble()
library(kableExtra)
table <- function(data){data %>% kableExtra::kable("html") %>% kable_styling(bootstrap_options = "striped", full_width = F)}
mtcars %>% head()
mtcars %>% head() %>% table()
mtcars %>% glimpse() %>% format_table()
library(kableExtra)
format_table <- function(data){data %>% kableExtra::kable("html") %>% kable_styling(bootstrap_options = "striped", full_width = F)}
mtcars %>% glimpse() %>% format_table()
library(tidyverse)
mtcars %>% head()
mtcars %>% head() %>% format_table()
mtcars %>% count(cyl) %>% format_table()
require(devtools)
require(devtools, character.only = T)
installed.packages()
"devtools" %in% installed.packages()
#check if devtools is installed and then install ExamPAData from github
if("devtools" %in% installed.packages()){
library(devtools)
install_github("https://github.com/sdcastillo/ExamPAData")
} else{
install.packages("devtools")
library(devtools)
install_github("https://github.com/sdcastillo/ExamPAData")
}
library(ExamPAData)
summary(insurance)
summary(insurance2)
library(ExamPAData)
health_insurance %>% head()
library(tidyverse)
health_insurance %>% head()
#addition
1 + 2
#addition
1 + 2 = 3
#addition
1 + 2
3 - 2
#division
4/2
#multiplication
2*2
#exponentiation
2^3
x <- c(1,2)
y <- c(3,4)
x + y
#addition
1 + 2
3 - 2
#multiplication
2*2
#division
4/2
#exponentiation
2^3
#addition
1 + 2
3 - 2
#multiplication
2*2
#division
4/2
#exponentiation
2^3
x*y
z <- x + y
z^2
z + 3
character <- "The"
character_vector <- c("The", "Quick")
factor = as.factor(character)
levels(factor)
factor_vector <- as.factor(character_vector)
levels(factor_vector)
bool*bool2
bool_true <- T
bool_false <- F
bool_true*bool_false
bool_vect <- c(T,T, F)
sum(bool_vect)
greet_me <- function(my_name){
print(paste0("Hello, ", my_name))
}
greet_me("Actuary")
greet_me("Future Actuary")
x + y
add_together(2,5)
add_together <- function(x, y){
x + y
}
add_together(2,5)
add_together <- function(x, y){
x + y
}
add_together(2,5)
add_together <- function(x, y){
return(x + y)
}
add_together(2,5)
x_vector <- c(1,2,3)
y_vector <- c(4,5,6)
add_together(x_vector, y_vector)
ls <- list(T, "Character", 3.14)
ls
ls <- list(bool = T, character = "character", numeric = 3.14)
ls
ls$numeric
ls$numeric + 5
everything <- list(vector = c(1,2,3), character = c("a", "b", "c"), list = ls)
everything
tibble <- tibble(age = c(25, 35), is_fsa = c(F, T))
tibble()
data <- tibble(age = c(25, 35), is_fsa = c(F, T))
data
data <- tibble(age = c(25, 35), has_fsa = c(F, T))
data
data$age
class(x)
class(everything)
str(everything)
summary(everything)
dim(data)
summary(data)
sqrt(log(max(c(3, 5))))
sqrt((max(c(3, 4, 16)))
sqrt((max(c(3, 4, 16))
sqrt((max(c(3, 4, 16)))
sqrt((max(c(3, 4, 16))))
sqrt((max(c(3, 4, 16))))
((sqrt((max(c(3, 4, 16)))) + 14))
log2(sqrt((max(c(3, 4, 16)))) + 14)
log2(sqrt((max(c(3, 4, 16)))))
mod(log2(sqrt((max(c(3, 4, 16))))),2)
exp(log2(sqrt((max(c(3, 4, 16))))))
sqrt(exp(log2(sqrt((max(c(3, 4, 16)))))))
log(sqrt(exp(log2(sqrt((max(c(3, 4, 16))))))))
max(c(3, 4, 16)) %>%
sqrt() %>%
log2() %>%
exp() %>%
sqrt() %>%
log()
4 %>% sqrt()
2.71828 %>% log()
2.71828 %>% log() %>% round(2)
max(c(3, 4, 16)) %>%
sqrt()
max(c(3, 4, 16)) %>%
sqrt() %>%
log2()
ls[1]
ls[2]
ls[[1]]
abc <- c("a", "b", "c")
a[1]
abc <- c("a", "b", "c")
abc[1]
abc[2]
abc[-2]
abc[-c(2,3)]
health_insurance %>% head()
library(tidyverse)
health_insurance %>% head()
library(ExamPAData)
health_insurance %>% head()
head(health_insurance)
library(tidyverse)
head(health_insurance)
health_insurance %>% glimpse()
health_insurance %>% count(children)
health_insurance %>% count(children, sex)
health_insurance %>% count(region, sex)
health_insurance %>% summary()
health_insurance %>% dim()
health_insurance %>% dim()
health_insurance %>% select(age, sex)
health_insurance %>%
select(age, region)
health_insurance %>%
filter(region == "southeast") %>%
select(age, region)
health_insurance %>%
filter(region == "southeast") %>%
select(age, region) %>%
head()
health_insurance %>%
select(age, region) %>%
head()
health_insurance %>% count(region, sex) %>% head()
health_insurance %>%
filter(region == "southeast") %>%
select(age, region) %>%
head()
health_insurance %>%
arrange(age)
health_insurance %>%
arrange(age) %>%
select(age, region) %>%
head()
health_insurance %>%
group_by(region) %>%
summarise(avg_cost = mean(cost))
health_insurance %>%
group_by(region) %>%
summarise(avg_cost = mean(age))
health_insurance %>%
group_by(region) %>%
summarise(avg_age = mean(age))
glimpse(health_insurance)
health_insurance %>%
group_by(region) %>%
summarise(avg_age = mean(age),
max_age = max(age),
median_charges = median(charges))
glimpse(health_insurance)
health_insurance %>%
group_by(region) %>%
summarise(avg_age = mean(age),
max_age = max(age),
median_charges = median(charges),
bmi_std_dev = sd(bmi))
actuary_salaries
actuary_salaries %>% summary()
actuary_salaries %>% count(industry)
actuary_salaries
actuary_salaries %>%
mutate(salary_low = substr(salary, 2))
actuary_salaries %>%
mutate(salary_low = substr(salary, 1,2))
actuary_salaries %>%
mutate(salary_low = substr(salary, 1,2),
salary_high = substr(salary, 6,7))
actuary_salaries %>%
head()
actuary_salaries <- actuary_salaries %>%
mutate(salary_low = substr(salary, 1,2),
salary_high = substr(salary, 6,7))
actuary_salaries %>%
head()
salary_low = min(salary_low)
actuary_salaries %>%
group_by(industry) %>%
summarise(salary_mid = max(salary_mid),
salary_high = max(salary_high),
salary_low = min(salary_low))
actuary_salaries <- actuary_salaries %>%
mutate(salary_mid = (salary_low + salary_high)/2)
actuary_salaries <- actuary_salaries %>%
mutate(salary_low = as.numeric(substr(salary, 1,2)),
salary_high = as.numeric(substr(salary, 6,7)))
actuary_salaries %>%
head()
actuary_salaries %>% count(industry)
actuary_salaries <- actuary_salaries %>%
mutate(salary_mid = (salary_low + salary_high)/2)
actuary_salaries %>%
group_by(industry) %>%
summarise(salary_mid = max(salary_mid),
salary_high = max(salary_high),
salary_low = min(salary_low))
actuary_salaries <- actuary_salaries %>%
mutate(salary_low = str_split(salary, " - ")[1],
salary_high = as.numeric(substr(salary, 6,7)))
actuary_salaries %>%
head()
actuary_salaries <- actuary_salaries %>%
mutate(salary_low = str_split(salary, " - ")[[1]],
salary_high = as.numeric(substr(salary, 6,7)))
actuary_salaries <- actuary_salaries %>%
mutate(salary_low = str_split(salary, " - ")[1],
salary_high = as.numeric(substr(salary, 6,7)))
actuary_salaries %>%
head()
actuary_salaries <- actuary_salaries %>%
mutate(salary_low = str_split(salary, " - ")[1] %>% unlist(),
salary_high = as.numeric(substr(salary, 6,7)))
actuary_salaries <- actuary_salaries %>%
mutate(salary_low = str_split(salary, " - ")[1] %>% unlist(),
salary_high = as.numeric(substr(salary, 6,7)))
actuary_salaries <- actuary_salaries %>%
mutate(salary_low = str_split(salary, " - ")[1] %>% as.numeric(),
salary_high = as.numeric(substr(salary, 6,7)))
actuary_salaries$salary %>% str_split(" - ")
actuary_salaries$salary %>% str_split(" - ")[1]
?str_split
actuary_salaries$salary %>% str_split(" - ", n = 2, simplify = T)
actuary_salaries$salary %>% str_split(" - ", n = 2) %>% str()
actuary_salaries$salary %>% str_split(" - ", n = 2)[1]
actuary_salaries$salary %>% str_split(pattern = " - ", n = 2)[1]
str_split(actuary_salaries$salary, pattern = " - ", n = 2)[1]
str_split(actuary_salaries$salary, pattern = " - ", n = 2)[1][1]
str_split(actuary_salaries$salary, pattern = " - ", n = 2)[1][[1]]
str_split(actuary_salaries$salary, pattern = " - ", n = 2)[1][[1]] %>% length()
str_split(actuary_salaries$salary, pattern = " - ", n = 2)[1][[1]][1]
actuary_salaries$salary %>%
str_split(, pattern = " - ", n = 2)[1][[1]][1]
actuary_salaries$salary %>%
str_split(., pattern = " - ", n = 2)[1][[1]][1]
actuary_salaries$salary %>%
map(~str_split(.x, pattern = " - ", n = 2)[1][[1]][1])
actuary_salaries$salary %>%
map_dbl(~str_split(.x, pattern = " - ", n = 2)[1][[1]][1])
actuary_salaries$salary %>%
map(~str_split(.x, pattern = " - ", n = 2)[1][[1]][1])
actuary_salaries$salary %>%
map(~unlist(str_split(.x, pattern = " - ", n = 2)[1][[1]][1]))
actuary_salaries$salary %>%
map(~str_split(.x, pattern = " - ", n = 2))
str_split()
?str_extract
#this data needs to be modified to include high and low salary columns as numeric
#use regex to match only first and last args
actuary_salaries$salary %>%
map(~str_split(.x, pattern = " - ", n = 2)[1])
#this data needs to be modified to include high and low salary columns as numeric
#use regex to match only first and last args
actuary_salaries$salary %>%
head(5) %>%
map(~str_split(.x, pattern = " - ", n = 2)[1])
#this data needs to be modified to include high and low salary columns as numeric
#use regex to match only first and last args
actuary_salaries$salary %>%
head(5) %>%
map(~str_split(.x, pattern = " - ", n = 2)[1][1])
#this data needs to be modified to include high and low salary columns as numeric
#use regex to match only first and last args
actuary_salaries$salary %>%
head(5) %>%
map(~str_split(.x, pattern = " - ", n = 2)[1][[1]])
#this data needs to be modified to include high and low salary columns as numeric
#use regex to match only first and last args
actuary_salaries$salary %>%
head(5) %>%
map(~str_split(.x, pattern = " - ", n = 2)[1][[1]][1])
#this data needs to be modified to include high and low salary columns as numeric
#use regex to match only first and last args
actuary_salaries$salary %>%
head(5) %>%
map(~str_split(.x, pattern = " - ", n = 2)[1][[1]][1] %>% as.numeric())
actuary_salaries$experience
#this data needs to be modified to include high and low salary columns as numeric
#use regex to match only first and last args
actuary_salaries$salary %>%
head(5) %>%
map(~str_split(.x, pattern = " - ", n = 2)[1][[1]][1] %>% as.vector())
#this data needs to be modified to include high and low salary columns as numeric
#use regex to match only first and last args
actuary_salaries$salary %>%
head(5) %>%
map(~str_split(.x, pattern = " - ", n = 2)[1][[1]][1] %>% unlist())
#this data needs to be modified to include high and low salary columns as numeric
#use regex to match only first and last args
actuary_salaries$salary %>%
head(5) %>%
map(~str_split(.x, pattern = " - ", n = 2)[1][[1]][1] %>% unlist()) %>%
sum()
#this data needs to be modified to include high and low salary columns as numeric
#use regex to match only first and last args
actuary_salaries$salary %>%
head(5) %>%
map(~str_split(.x, pattern = " - ", n = 2)[1][[1]][1] %>% unlist())
#this data needs to be modified to include high and low salary columns as numeric
#use regex to match only first and last args
actuary_salaries$salary %>%
tail(5) %>%
map(~str_split(.x, pattern = " - ", n = 2)[1][[1]][1] %>% unlist())
health_insurance %>%
mutate(charges_over_age = charges/age)
health_insurance %>%
mutate(charges_over_age = charges/age) %>%
select(age, charges, charges_over_age)
health_insurance %>%
mutate(charges_over_age = charges/age) %>%
select(age, charges, charges_over_age) %>%
head(5)
health_insurance %>%
mutate(age_bucket = case_when(age < 50 ~ 0,
age <= 70 ~ 1,
age > 70 ~ 2))
health_insurance %>%
mutate(age_bucket = case_when(age < 50 ~ 0,
age <= 70 ~ 1,
age > 70 ~ 2)) %>%
select(age_bucket)
health_insurance %>%
mutate(age_bucket = case_when(age < 50 ~ 0,
age <= 70 ~ 1,
age > 70 ~ 2)) %>%
select(age, age_bucket)
health_insurance %>%
mutate(age_bucket = case_when(age < 50 ~ 0,
age <= 70 ~ 1,
age > 70 ~ 2)) %>%
select(age, age_bucket) %>%
head()
health_insurance %>%
mutate(age_bucket = case_when(age < 50 ~ 0,
age <= 70 ~ 1,
age > 70 ~ 2)) %>%
select(age, age_bucket) %>%
summary()
health_insurance %>%
mutate(age_bucket = case_when(age < 50 ~ 0,
age <= 70 ~ 1,
age > 70 ~ 2)) %>%
select(age, age_bucket)
health_insurance %>%
mutate(age_bucket = case_when(age < 50 ~ 0,
age <= 70 ~ 1,
age > 70 ~ 2)) %>%
select(age, age_bucket)
health_insurance %>%
mutate(age_bucket = case_when(age < 50 ~ 0,
age <= 70 ~ 1,
age > 70 ~ 2)) %>%
select(age, age_bucket)
health_insurance <- health_insurance %>%
modify_if(is.character, as.factor)
health_insurance %>%
summary()
library(tidyverse)
library(tidyverse)
library(ExamPAData)
health_insurance %>% summary()
health_insurance %>% glimpse()
health_insurance %>% summary()
health_insurance %>% ggplot(aes(charges)) + geom_histogram()
health_insurance %>% ggplot(aes(charges)) + geom_histogram() + facet_wrap(vars(children))
health_insurance %>% ggplot(aes(charges)) + geom_histogram() + facet_wrap(vars(smoker))
health_insurance %>% ggplot(aes(charges)) + geom_histogram() + facet_wrap(vars(sex))
health_insurance %>% ggplot(aes(charges)) + geom_histogram() + facet_wrap(vars(region))
health_insurance %>% ggplot(aes(charges)) + geom_histogram()
health_insurance %>% summary()
health_insurance %>% ggplot(aes(charges)) + geom_histogram() + facet_wrap(vars(region))
health_insurance %>%
mutate(age_bucket = case_when(age < 24 ~ "18-24",
age <= 36 ~ "24-36",
age <= 50 ~ "36-50"))
health_insurance %>%
mutate(age_bucket = case_when(age < 24 ~ "18-24",
age <= 36 ~ "24-36",
age <= 50 ~ "36-50",
T ~ "50+"))
health_insurance <- health_insurance %>%
mutate(age_bucket = case_when(age < 24 ~ "18-24",
age <= 36 ~ "24-36",
age <= 50 ~ "36-50",
T ~ "50+"),
household_size_age_ratio = (1 + children)/age)
health_insurance %>%
glimpse()
health_insurance %>%
summary()
health_insurance <- health_insurance %>%
mutate(age_bucket = case_when(age < 24 ~ "18-24",
age <= 36 ~ "24-36",
age <= 50 ~ "36-50",
T ~ "50+") %>% fct_infreq(),
household_size_age_ratio = (1 + children)/age) %>% fct_infreq()
health_insurance <- health_insurance %>%
mutate(age_bucket = case_when(age < 24 ~ "18-24",
age <= 36 ~ "24-36",
age <= 50 ~ "36-50",
T ~ "50+") %>% fct_infreq(),
household_size_age_ratio = (1 + children)/age)
health_insurance %>%
summary()
df <- tibble(Question = c("A = 2; B = 3; A + B = ?",
"A = 2; B = 10; A*B = ?",
"What is the meaning of life?"),
Solution = c(5,10, 42),
YourAnswer = c(6,10, 69))
library(ExamPAData)
health_insurance
dim(health_insurance)
getwd()
knitr::include_graphics("bookdown_files\_files\book-logo.png")
knitr::include_graphics("bookdown_files/_files/book-logo.png")
knitr::include_graphics("bookdown_files/_files/book-logo.png")
knitr::include_graphics("./bookdown_files/_files/book-logo.png")
list.files("images")
knitr::include_graphics("images/book-logo.png")
knitr::include_graphics("images/book-logo.png")
knitr::include_graphics("images/book-logo.png")
