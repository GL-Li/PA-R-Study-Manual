model = glm(formula = charges ~ age + sex + bmi + smoker + (region=="southeast") + (region=="southwest"),
family = Gamma(link = "log"),
data = train)
pred = predict(model, test, type = "response")
get_rmsle(pred, test$charges)
summary(model)
train$sex %>% summary()
train$sex %>% levels()
get_rmsle(pred, test$charges)
summary(model)
knitr::include_graphics("images/gitbook_pull_request.png")
knitr::include_graphics("images/gitbook_pull_request.png")
knitr::include_graphics("images/gitbook_pull_request.png")
knitr::include_graphics("images/gitbook_pull_request.png")
library(bookdown)
publish_book()
knitr::include_graphics("images/gitbook_pull_request.png")
knitr::include_graphics("images/gitbook_pull_request.png")
install.packages("formatR")
library(tidyverse)
library(ExamPAData)
data <- health_insurance %>%
select(age, sex, charges) %>%
rename(claims = charges)
data %>% summary()
data %>% dim()
data %>% ggplot(aes(claims)) + geom_histogram()
model = lm(claims ~ age + sex, data = data)
coefficients(model)
library(randomForest)
tree <- rpart(charges ~ age + bmi, data = health_insurance)
library(ExamPAData)
library(tidyverse)
library(rpart)
library(rpart.plot)
tree <- rpart(charges ~ smoker + bmi, data = health_insurance)
rpart.plot(tree, type = 3)
library(scales)
library(kableExtra)
health_insurance %>%
mutate(bmi_30 = ifelse(bmi < 30, "bmi < 30", "bmi >= 30")) %>%
group_by(smoker,bmi_30) %>%
summarise(mean_claims = dollar(mean(charges)),
n = n()) %>%
ungroup() %>%
mutate(percent = round(n/sum(n),2)) %>%
select(-n) %>%
kable("markdown")
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.003))
rpart.plot(tree, type = 3)
tree <- rpart(formula = charges ~  ., data = health_insurance,
control = rpart.control(cp = 0.0001))
cost <- tree$cptable %>%
as_tibble() %>%
select(nsplit, CP, xerror)
cost %>% head()
cost %>%
filter(nsplit > 1) %>%
mutate(min = ifelse(xerror == min(cost$xerror),"y", "n")) %>%
ggplot(aes(nsplit, xerror, color = min)) +
geom_line() +
geom_point() +
theme_bw() +
theme(legend.position = "none") +
scale_color_manual(values = c("black", "red")) +
annotate("text", x = 25, y = 0.17, label = "Minimum Error", color = "red")
tree$cptable %>%
as_tibble() %>%
select(nsplit, CP, xerror) %>%
arrange(xerror) %>%
head()
pruned_tree <- prune(tree,
cp = tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"])
library(caret)
set.seed(42)
index <- createDataPartition(y = health_insurance$charges,
p = 0.8, list = F)
train <- health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
simple_tree <- rpart(formula = charges ~  .,
data = train,
control = rpart.control(cp = 0.0001,
minbucket = 200,
maxdepth = 10))
rpart.plot(simple_tree, type = 3)
tree_pred <- predict(tree, test)
simple_tree_pred <- predict(simple_tree, test)
get_rmsle <- function(y, y_hat){
sqrt(mean((log(y) - log(y_hat))^2))
}
get_rmsle(test$charges, tree_pred)
get_rmsle(test$charges, simple_tree_pred)
get_rmsle(test$charges, mean(train$charges))
library(randomForest)
tree <- rpart(charges ~ age + bmi, data = health_insurance)
df <- health_insurance %>% mutate(
prediction = predict(tree, health_insurance))
p1 <- df %>%
ggplot(aes(bmi, age, color = prediction)) +
geom_point() +
theme_bw() +
labs(title ="Decision Tree") +
theme(legend.position = "none")
rf <- randomForest(charges ~ age + bmi,
data = health_insurance, ntree = 50)
df <- health_insurance %>% mutate(
prediction = predict(rf, health_insurance))
p2 <- df %>%
ggplot(aes(bmi, age, color = prediction)) +
geom_point() +
theme_bw() +
labs(title ="Random Forest") +
theme(legend.position = "none")
library(ggpubr)
ggarrange(p1,p2)
library(bookdown)
pdf_book()
publish_book()
library(ExamPAData)
actuary_salaries %>% glimpse()
library(ExamPAData)
library(tidyverse)
actuary_salaries %>% glimpse()
actuary_salaries %>% count(industry)
actuary_salaries %>% summary()
actuary_salaries %>%
modify(industry, as.factor) %>%
summary()
actuary_salaries %>%
modify_at("industry", as.factor) %>%
summary()
actuary_salaries %>%
mutate(salary_high = as.numeric(salary_high))
actuary_salaries <- actuary_salaries %>%
mutate(salary_high = as.numeric(salary_high))
actuary_salaries %>%
filter(industry == "health")
actuary_salaries %>%
filter(industry == "Health")
actuary_salaries %>%
filter(industry == "Health", exams == 5)
actuary_salaries %>%
filter(industry == "Health", exams == 5) %>%
summarise(high = max(salary_high),
low = min(salary_low))
actuary_salaries %>%
mutate(salary_mid = (salary_low + salary_high)/2)
actuary_salaries <- actuary_salaries%>%
mutate(salary_mid = (salary_low + salary_high)/2)
actuary_salaries %>%
group_by(industry) %>%
summarise(high_salary_mid = max(salary_mid),
high_salary_high = max(salary_high),
low_salary_low = min(salary_low))
actuary_salaries %>%
filter(salary_low == 11)
actuary_salaries <- actuary_salaries %>%
mutate(salary_low = ifelse(salary_low == 11, 114, salary_low),
salary_high = ifelse(salary_low == 66, 166, salary_low))
actuary_salaries <- actuary_salaries %>%
mutate(salary_low = ifelse(salary_low == 11, 114, salary_low),
salary_high = ifelse(salary_low == 66, 166, salary_low)) %>%
filter(salary_low == 11)
actuary_salaries %>%
mutate(salary_low = ifelse(salary_low == 11, 114, salary_low),
salary_high = ifelse(salary_low == 66, 166, salary_low)) %>%
filter(salary_low == 11)
library(ExamPAData)
library(tidyverse)
actuary_salaries %>% glimpse()
actuary_salaries %>% count(industry)
actuary_salaries %>%
modify_at("industry", as.factor) %>%
summary()
actuary_salaries <- actuary_salaries %>%
mutate(salary_high = as.numeric(salary_high))
actuary_salaries %>%
filter(industry == "Health", exams == 5) %>%
summarise(high = max(salary_high),
low = min(salary_low))
actuary_salaries <- actuary_salaries%>%
mutate(salary_mid = (salary_low + salary_high)/2)
actuary_salaries %>%
group_by(industry) %>%
summarise(high_salary_mid = max(salary_mid),
high_salary_high = max(salary_high),
low_salary_low = min(salary_low))
actuary_salaries %>%
filter(salary_low == 11)
actuary_salaries %>%
mutate(salary_low = ifelse(salary_low == 11, 114, salary_low),
salary_high = ifelse(salary_low == 66, 166, salary_low)) %>%
filter(salary_low == 11)
library(ExamPAData)
actuary_salaries
actuary_salaries
library(ExamPAData)
library(ExamPAData)
library(tidyverse)
actuary_salaries %>% glimpse()
rm(list = ls())
library(ExamPAData)
actuary_salaries
ADSFLADFL
rm(list = ls())
library(ExamPAData)
library(tidyverse)
actuary_salaries %>% glimpse()
actuary_salaries %>% count(industry)
actuary_salaries <- actuary_salaries %>%
mutate(salary_high = as.numeric(salary_high))
actuary_salaries %>%
filter(industry == "Health", exams == 5)
actuary_salaries %>%
filter(industry == "Health", exams == 5) %>%
summarise(high_salary_high = max(salary_high),
low_salary_low = min(salary_low))
actuary_salaries %>%
mutate(salary_mid = (salary_low + salary_high)/2)
actuary_salaries <- actuary_salaries%>%
mutate(salary_mid = (salary_low + salary_high)/2)
actuary_salaries %>%
group_by(industry) %>%
summarise(high_salary_mid = max(salary_mid),
high_salary_high = max(salary_high),
low_salary_low = min(salary_low))
actuary_salaries %>%
filter(salary_low == 11)
actuary_salaries %>%
mutate(salary_low = ifelse(salary_low == 11, 114, salary_low),
salary_high = ifelse(salary_high == 66, 166, salary_high))
actuary_salaries <- actuary_salaries%>%
mutate(salary_low = ifelse(salary_low == 11, 114, salary_low),
salary_high = ifelse(salary_high == 66, 166, salary_high))
actuary_salaries %>%
group_by(industry) %>%
summarise(high_salary_mid = max(salary_mid),
high_salary_high = max(salary_high),
low_salary_low = min(salary_low))
actuary_salaries
?case_when
?substr
actuary_salaries %>%
mutate(n_exams = case_when(exams == "FSA" ~ 10,
exams == "ASA" ~ 7,
exams == "FCAS" ~ 10,
exams == "ACAS" ~ 7,
TRUE ~ as.numeric(substr(exams,1,1))))
actuary_salaries %>%
mutate(n_exams = case_when(exams == "FSA" ~ 10,
exams == "ASA" ~ 7,
exams == "FCAS" ~ 10,
exams == "ACAS" ~ 7,
TRUE ~ as.numeric(substr(exams,1,1)))) %>%
count(n_exams)
actuary_salaries <- actuary_salaries %>%
mutate(n_exams = case_when(exams == "FSA" ~ 10,
exams == "ASA" ~ 7,
exams == "FCAS" ~ 10,
exams == "ACAS" ~ 7,
TRUE ~ as.numeric(substr(exams,1,1))))
sum(is.na(actuary_salaries))
actuary_salaries %>%
mutate(social_life = n_exams/experience) %>%
group_by(industry) %>%
summarise(mean = mean(social_life))
asdfads
2+2
library(ExamPAData)
library(tidyverse)
actuary_salaries
View(actuary_salaries)
actuary_salaries %>% View()
actuary_salaries %>% glimpse()
actuary_salaries %>% mutate(salary_high = as.numeric(salary_high))
actuary_salaries <- actuary_salaries%>% mutate(salary_high = as.numeric(salary_high))
actuary_salaries %>%
filter(industry == "Health", exams == 5)
actuary_salaries %>%
filter(industry == "Health", exams == 5) %>%
summarise(max_salary_high = max(salary_high),
low_salary_low = min(salary_low))
actuary_salaries %>%
mutate(salary_mid = (salary_low + salary_high)/2)
actuary_salaries <- actuary_salaries%>%
mutate(salary_mid = (salary_low + salary_high)/2)
actuary_salaries %>%
group_by(industry) %>%
summarise(high_salary_mid = max(salary_mid),
high_salary_high = max(salary_high),
low_salary_low = min(salary_low))
rm(list = ls())
library(ExamPAData)
library(tidyverse)
actuary_salaries %>% glimpse()
actuary_salaries <- actuary_salaries%>% mutate(salary_high = as.numeric(salary_high))
actuary_salaries %>%
filter(industry == "Health", exams == 5) %>%
summarise(max_salary_high = max(salary_high),
low_salary_low = min(salary_low))
actuary_salaries <- actuary_salaries%>%
mutate(salary_mid = (salary_low + salary_high)/2)
actuary_salaries %>%
group_by(industry) %>%
summarise(high_salary_mid = max(salary_mid),
high_salary_high = max(salary_high),
low_salary_low = min(salary_low))
actuary_salaries %>%
filter(salary_low == 1)
actuary_salaries %>%
filter(salary_low == 11)
actuary_salaries %>%
mutate(salary_low = ifelse(salary_low == 11, 114, salary_low),
salary_high = ifelse(salary_high == 66, 166, salary_high))
actuary_salaries <- actuary_salaries%>%
mutate(salary_low = ifelse(salary_low == 11, 114, salary_low),
salary_high = ifelse(salary_high == 66, 166, salary_high))
actuary_salaries %>%
group_by(industry) %>%
summarise(high_salary_mid = max(salary_mid),
high_salary_high = max(salary_high),
low_salary_low = min(salary_low))
?case_when
actuary_salaries
?substr
actuary_salaries <- actuary_salaries %>%
mutate(n_exams = case_when(exams == "FSA" ~ 10,
exams == "ASA" ~ 7,
exams == "FCAS" ~ 10,
exams == "ACAS" ~ 7,
TRUE ~ as.numeric(substr(exams,1,1))))
actuary_salaries %>%
count(n_exams)
sum(is.na(actuary_salaries))
actuary_salaries %>%
mutate(social_life = n_exams/experience)
actuary_salaries %>%
mutate(social_life = n_exams/experience) %>%
group_by(industry) %>%
summarise(social_life = mean(social_life))
rm(list = ls())
asdflasdflafd
234092384
2 + 2
library(ExamPAData)
library(tidyverse)
actuary_salaries
actuary_salaries %>% View()
actuary_salaries %>% glimpse()
actuary_salaries <- actuary_salaries %>%
mutate(salary_high = as.numeric(salary_high))
actaury_salaries %>%
filter(industry == "Health", exams == 5)
actuary_salaries %>%
filter(industry == "Health", exams == 5)
actuary_salaries %>%
filter(industry == "Health", exams == 5) %>%
summarise(high = max(salary_high),
low = min(salary_low))
actuary_salaries %>%
mutate(salary_mid = (salary_low + salary_high)/2)
actuary_salaries <- actuary_salaries %>%
mutate(salary_mid = (salary_low + salary_high)/2)
actuary_salaries %>%
group_by(industry) %>%
summarise(high_salary_mid = max(salary_mid),
high_salary_high = max(salary_high),
low_salary_low = min(salary_low))
View(actuary_salaries)
View(actuary_salaries)
actuary_salaries %>%
filter(salary_low == 11)
actuary_salaries %>%
mutate(salary_low = ifelse(salary_low == 11, 114, salary_low),
salary_high = ifelse(salary_high == 66, 166, salary_high))
actuary_salaries <- actuary_salaries%>%
mutate(salary_low = ifelse(salary_low == 11, 114, salary_low),
salary_high = ifelse(salary_high == 66, 166, salary_high))
?case_when
?substr
actuary_salaries <- actuary_salaries %>%
mutate(n_exams = case_when(exams == "FSA" ~ 10,
exams == "ASA" ~ 7,
exams == "FCAS" ~ 10,
exams == "ACAS" ~ 7,
TRUE ~ as.numeric(substr(exams,1,1))))
sum(is.na(actuary_salaries))
actuary_salaries %>%
count(n_exams)
actuary_salaries %>%
mutate(social_life = n_exams/experience) %>%
group_by(industry) %>%
summarise(social_life = mean(social_life))
library(bookdown)
publish_book()
library(ExamPAData)
library(tidyverse)
ggplot(readmission,aes(x=ER))+geom_histogram()
readmission %>% count(ER)
readmission %>% glimpse()
ggplot(readmission,aes(x=log(LOS)))+geom_histogram()
ggplot(readmission,aes(x=Age))+geom_histogram()
ggplot(readmission,aes(x=log(Age)))+geom_histogram()
ggplot(readmission,aes(x=HCC.Riskscore))+geom_histogram()
ggplot(readmission,aes(x=log(HCC.Riskscore)))+geom_histogram()
readmission <- readmission %>%
mutate(log_riskscore = log(HCC.Riskscore),
log_LOS = log(LOS)) %>%
select(-HCC.Riskscore, -LOS)
readmission %>%
glimpse()
table(readmission$DRG.Class,readmission$DRG.Complication)
readmission %>%
count(DRG.Class, DRG.Complication)
readmission <- readmission %>%
filter(!( DRG.Class == "SURG" & DRG.Complication == "MedicalMCC.CC")) %>%
mutate(class = case_when(DRG.Class == "MED" & DRG.Complication == "MedicalMCC.CC" ~ "MED",
DRG.Class == "MED" & DRG.Complication == "MedicalNoC" ~ "MED",
DRG.Class == "MED" & DRG.Complication == "Other" ~ "OTHER",
DRG.Class == "SURG" & DRG.Complication == "MedicalMCC.CC" ~ "MED",
DRG.Class == "SURG" & DRG.Complication == "Other" ~ "OTHER",
DRG.Class == "SURG" & DRG.Complication == "SurgMCC.CC" ~ "SURG",
DRG.Class == "SURG" & DRG.Complication == "SurgNoC" ~ "SURG",
T ~ "OTHER")) %>%
select(-DRG.Class, -DRG.Complication)
readmission %>% count(class)
nstart.val <- 20
cluster_vars <- readmission[c('log_LOS','Age')]
for(i in 1:ncol(cluster_vars)){
cluster_vars[,i] <- scale(cluster_vars[,i])
}
km1 <- kmeans(cluster_vars,centers=1,nstart=nstart.val)
km2 <- kmeans(cluster_vars,centers=2,nstart=nstart.val)
km3 <- kmeans(cluster_vars,centers=3,nstart=nstart.val)
km4 <- kmeans(cluster_vars,centers=4,nstart=nstart.val)
km5 <- kmeans(cluster_vars,centers=5,nstart=nstart.val)
km6 <- kmeans(cluster_vars,centers=6,nstart=nstart.val)
km7 <- kmeans(cluster_vars,centers=7,nstart=nstart.val)
km8 <- kmeans(cluster_vars,centers=8,nstart=nstart.val)
km9 <- kmeans(cluster_vars,centers=9,nstart=nstart.val)
km10 <- kmeans(cluster_vars,centers=10,nstart=nstart.val)
km11 <- kmeans(cluster_vars,centers=11,nstart=nstart.val)
km12 <- kmeans(cluster_vars,centers=12,nstart=nstart.val)
var.exp <- data.frame(k = c(1:12),
bss_tss = c(km1$betweenss/km1$totss,
km2$betweenss/km2$totss,
km3$betweenss/km3$totss,
km4$betweenss/km4$totss,
km5$betweenss/km5$totss,
km6$betweenss/km6$totss,
km7$betweenss/km7$totss,
km8$betweenss/km8$totss,
km9$betweenss/km9$totss,
km10$betweenss/km10$totss,
km11$betweenss/km11$totss,
km12$betweenss/km12$totss))
ggplot(var.exp,aes(x=k,y=bss_tss))+geom_point()
LOS_Age_Clust <- as.factor(km4$cluster) #This creates a new variable based on having 8 clusters.
cluster_vars$LOS_Age_Clust <- LOS_Age_Clust
ggplot(data = cluster_vars, aes(x = Age, y = log_LOS, col = LOS_Age_Clust)) + geom_point() + theme(axis.text = element_blank(), legend.title = element_blank()) +ggtitle("Clustering with 4 groups")
#Both variables are factor variables
ggplot(readmission,aes(Gender,fill=factor(Readmission.Status))) + geom_bar(position = "fill") +
facet_wrap(~Race,ncol=2,scales="free")+scale_y_continuous()
#One factor variable and one continuous numeric variable
ggplot(readmission,aes(x=factor(Readmission.Status),y=log_riskscore)) + geom_boxplot() +facet_wrap(~factor(ER))
#Create train and test sets
library(caret)
set.seed(4321)
partition <- createDataPartition(readmission$Readmission.Status, list = FALSE, p = .75) #The partition will stratify using variable 1 from the dataframe
train <- readmission[partition, ]
test <- readmission[-partition, ]
print("TRAIN")
mean(train$Readmission.Status)
print("TEST")
mean(test$Readmission.Status)
train %>% glimpse()
library(pROC)
glm <- glm(Readmission.Status ~ . + log_riskscore*ER, data=train, family = binomial(link="logit"))
summary(glm)
preds<- predict(glm,newdat=test,type="response")
roc<- roc(test$Readmission.Status,preds)
confusionMatrix(factor(1*(preds>.8)),factor(test$Readmission.Status))
plot(roc)
auc(roc)
glm <- glm(Readmission.Status ~ . + log_riskscore*ER, data=train, family = binomial(link="logit"))
summary(glm)
glm <- glm(Readmission.Status ~ . + log_riskscore*ER, data=train, family = binomial(link="logit"))
summary(glm)
glm <- glm(Readmission.Status ~ . + log_riskscore*ER, data=train, family = binomial(link="logit"))
summary(glm)
?aic
library(MASS)
?AIC
glm <- glm(Readmission.Status ~ . + log_riskscore*ER, data=train, family = binomial(link="logit"))
summary(glm)
glm <- glm(Readmission.Status ~ . + log_riskscore*ER, data=train, family = binomial(link="logit"))
summary(glm)
preds<- predict(glm,newdat=test,type="response")
roc<- roc(test$Readmission.Status,preds)
confusionMatrix(factor(1*(preds>.8)),factor(test$Readmission.Status))
glm <- glm(Readmission.Status ~ . + log_riskscore*ER, data=train, family = binomial(link="logit"))
summary(glm)
summary(glm)
preds<- predict(glm,newdat=test,type="response")
roc<- roc(test$Readmission.Status,preds)
confusionMatrix(factor(1*(preds>.8)),factor(test$Readmission.Status))
glm <- glm(Readmission.Status ~ . + log_riskscore*ER, data=train, family = binomial(link="logit"))
summary(glm)
preds<- predict(glm,newdat=test,type="response")
roc<- roc(test$Readmission.Status,preds)
confusionMatrix(factor(1*(preds>.8)),factor(test$Readmission.Status))
