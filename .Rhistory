install.packages("bookdown")
library(installr)
install.packages("installr")
library(installr)
updateR()
.libPaths()
install.packages(c("anytime", "boot", "callr", "clipr", "cowplot", "curl", "dbplyr", "devtools", "digest", "dplyr", "ellipsis", "foreach", "forecast", "foreign", "ggplot2", "ggpubr", "ggsignif", "haven", "hms", "httr", "iterators", "knitr", "lava", "magick", "markdown", "mgcv", "mime", "modelr", "nlme", "numDeriv", "openssl", "pillar", "pkgbuild", "pkgconfig", "processx", "Rcpp", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "RODBC", "seriation", "sys", "tibble", "tidyquant", "tidyr", "timetk", "tsibble", "TTR", "vctrs", "whisker", "xfun", "xgboost", "xml2", "zip"))
install.packages(c("anytime", "boot", "callr", "clipr", "cowplot", "curl", "dbplyr", "devtools", "digest", "dplyr", "ellipsis", "foreach", "forecast", "foreign", "ggplot2", "ggpubr", "ggsignif", "haven", "hms", "httr", "iterators", "knitr", "lava", "magick", "markdown", "mgcv", "mime", "modelr", "nlme", "numDeriv", "openssl", "pillar", "pkgbuild", "pkgconfig", "processx", "Rcpp", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "RODBC", "seriation", "sys", "tibble", "tidyquant", "tidyr", "timetk", "tsibble", "TTR", "vctrs", "whisker", "xfun", "xgboost", "xml2", "zip"))
install.packages(c("anytime", "boot", "callr", "clipr", "cowplot", "curl", "dbplyr", "devtools", "digest", "dplyr", "ellipsis", "foreach", "forecast", "foreign", "ggplot2", "ggpubr", "ggsignif", "haven", "hms", "httr", "iterators", "knitr", "lava", "magick", "markdown", "mgcv", "mime", "modelr", "nlme", "numDeriv", "openssl", "pillar", "pkgbuild", "pkgconfig", "processx", "Rcpp", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "RODBC", "seriation", "sys", "tibble", "tidyquant", "tidyr", "timetk", "tsibble", "TTR", "vctrs", "whisker", "xfun", "xgboost", "xml2", "zip"))
install.packages(c("anytime", "boot", "callr", "clipr", "cowplot", "curl", "dbplyr", "devtools", "digest", "dplyr", "ellipsis", "foreach", "forecast", "foreign", "ggplot2", "ggpubr", "ggsignif", "haven", "hms", "httr", "iterators", "knitr", "lava", "magick", "markdown", "mgcv", "mime", "modelr", "nlme", "numDeriv", "openssl", "pillar", "pkgbuild", "pkgconfig", "processx", "Rcpp", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "RODBC", "seriation", "sys", "tibble", "tidyquant", "tidyr", "timetk", "tsibble", "TTR", "vctrs", "whisker", "xfun", "xgboost", "xml2", "zip"))
install.packages(c("anytime", "boot", "callr", "clipr", "cowplot", "curl", "dbplyr", "devtools", "digest", "dplyr", "ellipsis", "foreach", "forecast", "foreign", "ggplot2", "ggpubr", "ggsignif", "haven", "hms", "httr", "iterators", "knitr", "lava", "magick", "markdown", "mgcv", "mime", "modelr", "nlme", "numDeriv", "openssl", "pillar", "pkgbuild", "pkgconfig", "processx", "Rcpp", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "RODBC", "seriation", "sys", "tibble", "tidyquant", "tidyr", "timetk", "tsibble", "TTR", "vctrs", "whisker", "xfun", "xgboost", "xml2", "zip"))
install.packages(c("anytime", "boot", "callr", "clipr", "cowplot", "curl", "dbplyr", "devtools", "digest", "dplyr", "ellipsis", "foreach", "forecast", "foreign", "ggplot2", "ggpubr", "ggsignif", "haven", "hms", "httr", "iterators", "knitr", "lava", "magick", "markdown", "mgcv", "mime", "modelr", "nlme", "numDeriv", "openssl", "pillar", "pkgbuild", "pkgconfig", "processx", "Rcpp", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "RODBC", "seriation", "sys", "tibble", "tidyquant", "tidyr", "timetk", "tsibble", "TTR", "vctrs", "whisker", "xfun", "xgboost", "xml2", "zip"))
install.packages(c("anytime", "boot", "callr", "clipr", "cowplot", "curl", "dbplyr", "devtools", "digest", "dplyr", "ellipsis", "foreach", "forecast", "foreign", "ggplot2", "ggpubr", "ggsignif", "haven", "hms", "httr", "iterators", "knitr", "lava", "magick", "markdown", "mgcv", "mime", "modelr", "nlme", "numDeriv", "openssl", "pillar", "pkgbuild", "pkgconfig", "processx", "Rcpp", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "RODBC", "seriation", "sys", "tibble", "tidyquant", "tidyr", "timetk", "tsibble", "TTR", "vctrs", "whisker", "xfun", "xgboost", "xml2", "zip"))
install.packages(c("anytime", "boot", "callr", "clipr", "cowplot", "curl", "dbplyr", "devtools", "digest", "dplyr", "ellipsis", "foreach", "forecast", "foreign", "ggplot2", "ggpubr", "ggsignif", "haven", "hms", "httr", "iterators", "knitr", "lava", "magick", "markdown", "mgcv", "mime", "modelr", "nlme", "numDeriv", "openssl", "pillar", "pkgbuild", "pkgconfig", "processx", "Rcpp", "RcppArmadillo", "recipes", "rlang", "rmarkdown", "RODBC", "seriation", "sys", "tibble", "tidyquant", "tidyr", "timetk", "tsibble", "TTR", "vctrs", "whisker", "xfun", "xgboost", "xml2", "zip"))
iris %>% head()
library(tidyverse)
iris %>% head()
iris %>% head()
iris %>% glimpse()
iris %>% summary()
dim(iris)
summary(iris)
iris %>% summary()
iris %>% dim()
iris %>% select(Sepal.Length, Sepal.Width) %>% head()
iris %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
summarise(TotalLength = sum(Sepal.Length))
iris %>%
select(Sepal.Length, Species) %>%
group_by(Species) %>%
summarise(TotalLength = sum(Sepal.Length),
MaxLength = max(Sepal.Length),
MeanLength = mean(Sepal.Length))
data(boston)
data("boston")
data()
data("Seatbelt")
data("Seatbelts")
head(Seatbelts)
data("Titanic")
head(Titanic)
class(Titanic)
Titanic
sum(is.na(Titanic))
data("USPersonalExpenditure")
USPersonalExpenditure %>% head()
library(tidyverse)
USPersonalExpenditure %>% head()
data(""BJsales"")
data("BJSales")
data <- read_csv("C:/Users/sam.castillo/Desktop/R Manual Data/insurance.csv")
data %>% head()
data %>% summary()
data <- read_csv("C:/Users/sam.castillo/Desktop/R Manual Data/insurance.csv") %>%
select(age, sex, region, charges)
data %>% summary()
library(tidyverse)
data <- read_csv("C:/Users/sam.castillo/Desktop/R Manual Data/insurance.csv") %>%
select(age, sex, charges) #put this into an r library
data %>% summary()
data %>% dim()
data <- read_csv("C:/Users/sam.castillo/Desktop/R Manual Data/insurance.csv") %>%
select(age, sex, charges) %>%  #put this into an r library
rename(claims = charges)
data %>% summary()
data %>% ggplot(aes(claims)) + geom_histogram()
model = lm(claims ~ age + sex, data = data)
model %>% summary()
summary(model)
summary(model)
coefficients(model)
library(tidyverse)
data <- read_csv("C:/Users/sam.castillo/Desktop/R Manual Data/health_insurance.csv") %>%
select(age, sex, charges) %>%  #put this into an r library
rename(claims = charges)
data %>% summary()
data %>% dim()
iris %>% count(Species)
head(iris)
mtcars
mtcars %>% head()
mtcars %>% glimpse()
diagmonds
diamonds
diamonds %>% head()
diamonds %>% glimpse()
diamonds %>% count(cut)
diamonds %>% count(cut, color)
diamonds %>% count(cut, color)
diamonds %>% count(cut, color) %>% pivot_wider()
?pivot_wider
diamonds %>% count(cut, color) %>% pivot_wider(values_from = "n")
diamonds %>% count(cut, color) %>% pivot_wider(names_from = c("cut", "color"),values_from = "n")
diamonds %>% count(cut, color) %>% pivot_wider(names_from = c("cut"),values_from = "n")
data("gss_cat")
data("fruit")
fruit
data()
mtcars %>% head()
mtcars %>% glimpse()
relig_income
mtcars %>% count(cyl)
mtcars %>% count(cyl, hph)
mtcars %>% count(cyl, hp)
mtcars %>% count(cyl, vs)
mtcars %>% summary()
mtcars %>% dim()
mtcars %>% select(mpg, cyl)
tibble(Question = "A = 2; B = 3; A + B = ?", Solution = "5", YourAnser = "6")
tibble(Question = c("A = 2; B = 3; A + B = ?",
"A = 2; B = 10; A*B = ?"), Solution = c(5,10), YourAnser = c(6,10))
tibble(Question = c("A = 2; B = 3; A + B = ?",
"A = 2; B = 10; A*B = ?"),
Solution = c(5,10),
YourAnser = c(6,10)) %>%
kableExtra::kable("html")
df <- tibble(Question = c("A = 2; B = 3; A + B = ?",
"A = 2; B = 10; A*B = ?"),
Solution = c(5,10),
YourAnser = c(6,10))
df %>% select(Question) %>%
kableExtra::kable("html")
df %>% kableExtra::kable("html")
df %>% mutate(Correct = (Answer = Solution))
df %>% mutate(Correct = (Answer == Solution))
df %>% mutate(Correct = (YourAnswer == Solution))
df <- tibble(Question = c("A = 2; B = 3; A + B = ?",
"A = 2; B = 10; A*B = ?"),
Solution = c(5,10),
YourAnswer = c(6,10))
df %>% select(Question) %>%
kableExtra::kable("html")
df %>% mutate(Correct = (YourAnswer == Solution))
df %>% mutate(Correct = (YourAnswer == Solution)) %>% kableExtra::kable("html")
df %>% mutate(Correct = (YourAnswer == Solution)*1) %>% kableExtra::kable("html")
df <- tibble(Question = c("A = 2; B = 3; A + B = ?",
"A = 2; B = 10; A*B = ?",
"What is the meaning of life?"),
Solution = c(5,10, 42),
YourAnswer = c(6,10))
df <- tibble(Question = c("A = 2; B = 3; A + B = ?",
"A = 2; B = 10; A*B = ?",
"What is the meaning of life?"),
Solution = c(5,10, 42),
YourAnswer = c(6,10, 69))
df %>% select(Question) %>%
kableExtra::kable("html")
df %>% kableExtra::kable("html")
df %>% mutate(Correct = (YourAnswer == Solution)*1) %>% kableExtra::kable("html")
tibble(x1 = c("x11", "x12", "x13"), x2 = c("x21", "x22", "x23"))
tibble(x1 = c("x11", "x12", "x13"), x2 = c("x21", "x22", "x23")) %>% kableExtra::kable("html")
library(tidyverse)
library(caret)
data <- read_csv('MSHA_Mine_Data_2013-2016.csv')
data %>% glimpse()
data %>% select(YEAR) %>% summary()
data %>% count(YEAR)
data %>% glimpse()
data %>% count(US_STATE)
data %>% count(YEAR)
data %>% select(NUM_INJURIES) %>% summary()
data %>% select(EMP_HRS_TOTAL) %>% summary()
data %>% count(NUM_INJURIES)
data %>% mutate(NO_INJURIES = ifelse(NUM_INJURIES == 0, "No Injuries", "At Least One Injury")) %>% count(NO_INJURIES)
data %>%
mutate(NO_INJURIES = ifelse(NUM_INJURIES == 0, "No Injuries", "At Least One Injury")) %>%
count(NO_INJURIES) %>%
mutate(PERCENT = n/sum(n))
data %>% ggplot(aes(NUM_INJURIES)) + geom_histogram()
data %>% ggplot(aes(EMP_HRS_TOTAL)) + geom_histogram()
data %>% select(EMP_HRS_TOTAL) %>% summary()
data %>% filter(EMP_HRS_TOTAL < 6811350) %>% ggplot(aes(EMP_HRS_TOTAL)) + geom_histogram()
data %>% select(EMP_HRS_TOTAL) %>% summary()
data %>% filter(EMP_HRS_TOTAL < 30000) %>% ggplot(aes(EMP_HRS_TOTAL)) + geom_histogram()
data %>% select(NUM_INJURIES) %>% summary()
data %>%
mutate(NO_INJURIES = ifelse(NUM_INJURIES == 0, "No Injuries", "At Least One Injury")) %>%
count(NO_INJURIES) %>%
mutate(PERCENT = n/sum(n))
data %>% select(NUM_INJURIES) %>% summary()
data %>% select(EMP_HRS_TOTAL) %>% summary()
head(data)
data %>% ggplot(aes(NUM_INJURIES)) + geom_histogram()
data %>% select(NUM_INJURIES) %>% summary()
data %>% select(EMP_HRS_TOTAL) %>% summary()
data %>% select(EMP_HRS_TOTAL) %>% summary()
data %>% ggplot(aes(EMP_HRS_TOTAL)) + geom_histogram()
data %>%
mutate(NO_INJURIES = ifelse(NUM_INJURIES == 0, "No Injuries", "At Least One Injury")) %>%
count(NO_INJURIES) %>%
mutate(PERCENT = n/sum(n))
data %>% glimpse()
data %>%
count(MINE_STATUS)
data %>%
filter(MINE_STATUS %in% c("Active", "Full-time permanent"))
data <- data %>%
filter(MINE_STATUS %in% c("Active", "Full-time permanent"))
data %>%
select(EMP_HRS_TOTAL)
data %>% head()
data %>%
filter(EMP_HRS_TOTAL < 2000) %>%
dim()
data %>%
filter(EMP_HRS_TOTAL > 2000) %>%
dim()
data <- data %>%
filter(MINE_STATUS %in% c("Active", "Full-time permanent"),
EMP_HRS_TOTAL > 2000)
dim(data)
sum(is.na(data))
data %>%
group_by(YEAR) %>%
summarise(
AVG_INJURY_RATE = sum(NUM_INJURIES/EMP_HRS_TOTAL)
)
data %>%
group_by(YEAR) %>%
summarise(
AVG_INJURY_RATE = sum(NUM_INJURIES)/sum(EMP_HRS_TOTAL))
data %>%
group_by(YEAR) %>%
summarise(
AVG_INJURY_RATE = mean(NUM_INJURIES/EMP_HRS_TOTAL)
)
data %>%
group_by(YEAR) %>%
summarise(
AVG_INJURY_RATE = mean(NUM_INJURIES/EMP_HRS_TOTAL*2000)
)
data %>%
ggplot(aes(NUM_INJURIES, TYPE_OF_MINE)) +
geom_boxplot()
data %>%
ggplot(aes(TYPE_OF_MINE,NUM_INJURIES)) +
geom_boxplot()
data %>%
ggplot(aes(COMMODITY,NUM_INJURIES)) +
geom_boxplot()
data %>%
ggplot(aes(TYPE_OF_MINE,log(NUM_INJURIES))) +
geom_boxplot()
data %>%
ggplot(aes(TYPE_OF_MINE,NUM_INJURIES)) +
geom_boxplot()
data %>%
ggplot(aes(COMMODITY,NUM_INJURIES)) +
geom_boxplot()
rpart.plot(pruned_tree)
library(tidyverse)
library(caret)
library(rpart)
library(rpart.plot)
rpart.plot(pruned_tree)
train_dtree = train %>% select(NUM_INJURIES,COMMODITY, SEAM_HEIGHT, TYPE_OF_MINE, MINE_STATUS, AVG_EMP_TOTAL, EMP_HRS_TOTAL, PCT_HRS_UNDERGROUND, PCT_HRS_AUGER, PCT_HRS_CULM_BANK, PCT_HRS_STRIP, PCT_HRS_OFFICE, PCT_HRS_OTHER_SURFACE, PCT_HRS_SHOP_YARD, PCT_HRS_STRIP)
library(tidyverse)
library(caret)
library(rpart)
library(rpart.plot)
data <- read_csv('MSHA_Mine_Data_2013-2016.csv')
data %>% glimpse()
data %>% select(NUM_INJURIES) %>% summary()
data %>% select(EMP_HRS_TOTAL) %>% summary()
data %>% ggplot(aes(NUM_INJURIES)) + geom_histogram()
data %>% ggplot(aes(EMP_HRS_TOTAL)) + geom_histogram()
data %>%
mutate(NO_INJURIES = ifelse(NUM_INJURIES == 0, "No Injuries", "At Least One Injury")) %>%
count(NO_INJURIES) %>%
mutate(PERCENT = n/sum(n))
data %>%
count(MINE_STATUS)
data <- data %>%
filter(MINE_STATUS %in% c("Active", "Full-time permanent"),
EMP_HRS_TOTAL > 2000)
dim(data)
data %>%
group_by(YEAR) %>%
summarise(
AVG_INJURY_RATE = sum(NUM_INJURIES)/sum(EMP_HRS_TOTAL)*2000
)
data %>%
ggplot(aes(TYPE_OF_MINE,NUM_INJURIES)) +
geom_boxplot()
#create the same type of boxplot for COMMONITY
set.seed(42)
partition <- createDataPartition(data$NUM_INJURIES, list = FALSE, p = .80)
train <- data %>% slice(partition)
test <- data %>% slice(-partition)
dim(train)
dim(test)
#checks that all rows are included
nrow(train) + nrow(test) == nrow(data)
set.seed(153) # because rpart uses cross-validation for estimating complexity parameter
#This is a formula which uses ALL variables as predictors
#The target is NUM_INJURIES
#The weight variable is EMP_HRS_TOTAL
#select which variables to include by adding/removing columns from train_dtree
train_dtree = train %>% select(NUM_INJURIES, YEAR, COMMODITY, SEAM_HEIGHT, TYPE_OF_MINE, MINE_STATUS, AVG_EMP_TOTAL, EMP_HRS_TOTAL, PCT_HRS_UNDERGROUND, PCT_HRS_AUGER, PCT_HRS_CULM_BANK, PCT_HRS_STRIP, PCT_HRS_OFFICE, PCT_HRS_OTHER_SURFACE, PCT_HRS_SHOP_YARD, PCT_HRS_STRIP)
test_dtree <- test %>% select(names(train_dtree))
#Warning: including ALL of the percentage variables will result in an "over determined system", which means that some columns are linear combinations of other columns, and this will break some models.  This was a trap by the SOA on the 2018 version of this exam.  For example, if all pct columns are included, then PCT_TOTAL = PCT_UNDERGROUND + PCT_SURFACE + ....  To fix this, in train_dtree, PCT_SURFACE is intentionally excluded by default
#The parameters below are defaults, and probably are bad values to use
tree <- rpart(cbind(EMP_HRS_TOTAL/2000, NUM_INJURIES) ~ . - EMP_HRS_TOTAL,
data = train_dtree,
method = "anova",
control = rpart.control(minbucket = 50,
cp = 0,
maxdepth = 20))
plotcp(tree)
pruned_tree <- prune(tree, cp = tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"])
rpart.plot(pruned_tree)
printcp(pruned_tree)
predictions_unweighted <- predict(pruned_tree, newdata = test_dtree, type = "vector")
predictions1 = predictions_unweighted*(test_dtree$EMP_HRS_TOTAL/2000)
train_dtree = train %>% select(NUM_INJURIES,COMMODITY, SEAM_HEIGHT, TYPE_OF_MINE, MINE_STATUS, AVG_EMP_TOTAL, EMP_HRS_TOTAL, PCT_HRS_UNDERGROUND, PCT_HRS_AUGER, PCT_HRS_CULM_BANK, PCT_HRS_STRIP, PCT_HRS_OFFICE, PCT_HRS_OTHER_SURFACE, PCT_HRS_SHOP_YARD, PCT_HRS_STRIP)
test_dtree <- test %>% select(names(train_dtree))
tree <- rpart(cbind(EMP_HRS_TOTAL/2000, NUM_INJURIES) ~ . - EMP_HRS_TOTAL,
data = train_dtree,
method = "poisson",
control = rpart.control(minbucket = 5,
cp = 0.01,
maxdepth = 20))
plotcp(tree)
pruned_tree <- prune(tree, cp = tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"])
rpart.plot(pruned_tree)
printcp(pruned_tree)
predictions_unweighted <- predict(pruned_tree, newdata = test_dtree, type = "vector")
predictions2 = predictions_unweighted*(test_dtree$EMP_HRS_TOTAL/2000)
train_dtree = train %>% select(NUM_INJURIES,COMMODITY, SEAM_HEIGHT, TYPE_OF_MINE, MINE_STATUS, AVG_EMP_TOTAL, EMP_HRS_TOTAL, PCT_HRS_UNDERGROUND, PCT_HRS_AUGER, PCT_HRS_CULM_BANK, PCT_HRS_STRIP, PCT_HRS_OFFICE, PCT_HRS_OTHER_SURFACE, PCT_HRS_SHOP_YARD, PCT_HRS_STRIP)
test_dtree <- test %>% select(names(train_dtree))
tree <- rpart(cbind(EMP_HRS_TOTAL/2000, NUM_INJURIES) ~ . - EMP_HRS_TOTAL,
data = train_dtree,
method = "poisson",
control = rpart.control(minbucket = 10,
cp = 0.01,
maxdepth = 20))
plotcp(tree)
pruned_tree <- prune(tree, cp = tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"])
rpart.plot(pruned_tree)
printcp(pruned_tree)
predictions_unweighted <- predict(pruned_tree, newdata = test_dtree, type = "vector")
predictions2 = predictions_unweighted*(test_dtree$EMP_HRS_TOTAL/2000)
train_dtree = train %>% select(NUM_INJURIES,COMMODITY, SEAM_HEIGHT, TYPE_OF_MINE, MINE_STATUS, AVG_EMP_TOTAL, EMP_HRS_TOTAL, PCT_HRS_UNDERGROUND, PCT_HRS_AUGER, PCT_HRS_CULM_BANK, PCT_HRS_STRIP, PCT_HRS_OFFICE, PCT_HRS_OTHER_SURFACE, PCT_HRS_SHOP_YARD, PCT_HRS_STRIP)
test_dtree <- test %>% select(names(train_dtree))
tree <- rpart(cbind(EMP_HRS_TOTAL/2000, NUM_INJURIES) ~ . - EMP_HRS_TOTAL,
data = train_dtree,
method = "poisson",
control = rpart.control(minbucket = 10,
cp = 0.001,
maxdepth = 20))
plotcp(tree)
pruned_tree <- prune(tree, cp = tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"])
rpart.plot(pruned_tree)
printcp(pruned_tree)
predictions_unweighted <- predict(pruned_tree, newdata = test_dtree, type = "vector")
predictions2 = predictions_unweighted*(test_dtree$EMP_HRS_TOTAL/2000)
plotcp(tree)
train_dtree = train %>% select(NUM_INJURIES,COMMODITY, SEAM_HEIGHT, TYPE_OF_MINE, MINE_STATUS, AVG_EMP_TOTAL, EMP_HRS_TOTAL, PCT_HRS_UNDERGROUND, PCT_HRS_AUGER, PCT_HRS_CULM_BANK, PCT_HRS_STRIP, PCT_HRS_OFFICE, PCT_HRS_OTHER_SURFACE, PCT_HRS_SHOP_YARD, PCT_HRS_STRIP)
test_dtree <- test %>% select(names(train_dtree))
tree <- rpart(cbind(EMP_HRS_TOTAL/2000, NUM_INJURIES) ~ . - EMP_HRS_TOTAL,
data = train_dtree,
method = "poisson",
control = rpart.control(minbucket = 10,
cp = 0.005,
maxdepth = 20))
plotcp(tree)
pruned_tree <- prune(tree, cp = tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"])
rpart.plot(pruned_tree)
printcp(pruned_tree)
predictions_unweighted <- predict(pruned_tree, newdata = test_dtree, type = "vector")
predictions2 = predictions_unweighted*(test_dtree$EMP_HRS_TOTAL/2000)
#This function will calculate the log-liklihood based on a Poisson model for the number of injuries
LLfunction <- function(targets, predicted_values){
p_v_zero <- ifelse(predicted_values <= 0, 0, predicted_values)
p_v_pos <- ifelse(predicted_values <= 0, 0.000001 ,predicted_values)
return(sum(targets*log(p_v_pos)) - sum(p_v_zero))
}
print("loglikelihood")
LLfunction(test$NUM_INJURIES,predictions1)
LLfunction(test$NUM_INJURIES,predictions2)
average_injuries_per_2000_hrs = train %>%
summarise(mean = sum(NUM_INJURIES)/sum(EMP_HRS_TOTAL)*2000) %>%
unlist() %>% as.numeric()
LLfunction(test$NUM_INJURIES, average_injuries_per_2000_hrs)
LLfunction(test$NUM_INJURIES, 0)
train_dtree = train %>% select(NUM_INJURIES,COMMODITY, SEAM_HEIGHT, TYPE_OF_MINE, MINE_STATUS, AVG_EMP_TOTAL, EMP_HRS_TOTAL, PCT_HRS_UNDERGROUND, PCT_HRS_AUGER, PCT_HRS_CULM_BANK, PCT_HRS_STRIP, PCT_HRS_OFFICE, PCT_HRS_OTHER_SURFACE, PCT_HRS_SHOP_YARD, PCT_HRS_STRIP)
test_dtree <- test %>% select(names(train_dtree))
tree <- rpart(cbind(EMP_HRS_TOTAL/2000, NUM_INJURIES) ~ . - EMP_HRS_TOTAL,
data = train_dtree,
method = "poisson",
control = rpart.control(minbucket = 10,
cp = 0.005,
maxdepth = 20))
plotcp(tree)
pruned_tree <- prune(tree, cp = tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"])
rpart.plot(pruned_tree)
printcp(pruned_tree)
predictions_unweighted <- predict(pruned_tree, newdata = test_dtree, type = "vector")
predictions2 = predictions_unweighted*(test_dtree$EMP_HRS_TOTAL/2000)
#This function will calculate the log-liklihood based on a Poisson model for the number of injuries
LLfunction <- function(targets, predicted_values){
p_v_zero <- ifelse(predicted_values <= 0, 0, predicted_values)
p_v_pos <- ifelse(predicted_values <= 0, 0.000001 ,predicted_values)
return(sum(targets*log(p_v_pos)) - sum(p_v_zero))
}
print("loglikelihood")
LLfunction(test$NUM_INJURIES,predictions1)
LLfunction(test$NUM_INJURIES,predictions2)
average_injuries_per_2000_hrs = train %>%
summarise(mean = sum(NUM_INJURIES)/sum(EMP_HRS_TOTAL)*2000) %>%
unlist() %>% as.numeric()
LLfunction(test$NUM_INJURIES, average_injuries_per_2000_hrs)
LLfunction(test$NUM_INJURIES, 0)
train_dtree = train %>% select(NUM_INJURIES,COMMODITY, SEAM_HEIGHT, TYPE_OF_MINE, MINE_STATUS, AVG_EMP_TOTAL, EMP_HRS_TOTAL, PCT_HRS_UNDERGROUND, PCT_HRS_AUGER, PCT_HRS_CULM_BANK, PCT_HRS_STRIP, PCT_HRS_OFFICE, PCT_HRS_OTHER_SURFACE, PCT_HRS_SHOP_YARD, PCT_HRS_STRIP)
test_dtree <- test %>% select(names(train_dtree))
tree <- rpart(cbind(EMP_HRS_TOTAL/2000, NUM_INJURIES) ~ . - EMP_HRS_TOTAL,
data = train_dtree,
method = "poisson",
control = rpart.control(minbucket = 10,
cp = 0.005,
maxdepth = 20))
plotcp(tree)
pruned_tree <- prune(tree, cp = tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"])
rpart.plot(pruned_tree)
printcp(pruned_tree)
predictions_unweighted <- predict(pruned_tree, newdata = test_dtree, type = "vector")
predictions2 = predictions_unweighted*(test_dtree$EMP_HRS_TOTAL/2000)
pruned_tree$cptable
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(tidyverse)
mtcars %>% head()
mtcars
mtcars %>% as_tibble()
library(kableExtra)
table <- function(data){data %>% kableExtra::kable("html") %>% kable_styling(bootstrap_options = "striped", full_width = F)}
mtcars %>% head()
mtcars %>% head() %>% table()
mtcars %>% glimpse() %>% format_table()
library(kableExtra)
format_table <- function(data){data %>% kableExtra::kable("html") %>% kable_styling(bootstrap_options = "striped", full_width = F)}
mtcars %>% glimpse() %>% format_table()
library(tidyverse)
mtcars %>% head()
mtcars %>% head() %>% format_table()
mtcars %>% count(cyl) %>% format_table()
