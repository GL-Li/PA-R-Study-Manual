ggplot(dat,aes(x=Rd_Feature,y=Crash_Score,fill=Rd_Class))+
geom_boxplot()+
facet_wrap(~Rd_Feature,scale="free")
#Create train and test sets
library(caret)
set.seed(1234)
partition <- createDataPartition(dat$Crash_Score, list = FALSE, p = .75)
train <- dat[partition, ]
test <- dat[-partition, ]
print("TRAIN")
mean(train$Crash_Score)
print("TEST")
mean(test$Crash_Score)
#OLS on current variables
GLMols <- glm(Crash_Score ~ ., family = gaussian(), data = train)
summary(GLMols)
print("AIC")
AIC(GLMols)
predict <- predict(GLMols,newdata=test,type="response")
print("RMSE")
sqrt(sum((test$Crash_Score-predict)^2)/nrow(test))
library(MASS)
GLMols1 <- glm(Crash_Score ~ 1, family = gaussian(), data = train) #If using forward selection it is necessary to fit a model with no predictors to use as the start.
stepAIC(GLMols1, direction = "forward", k = log(nrow(train)), scope = list(upper = GLMols, lower = GLMols1)) #For backward selection, the first argument should be GLMols, the full model.
library(MASS)
GLMols1 <- glm(Crash_Score ~ 1, family = gaussian(), data = train) #If using forward selection it is necessary to fit a model with no predictors to use as the start.
stepAIC(GLMols1, direction = "backward", k = log(nrow(train)), scope = list(upper = GLMols, lower = GLMols1)) #For backward selection, the first argument should be GLMols, the full model.
stepAIC(GLMols1, direction = "backward", k = log(nrow(train)), scope = list(upper = GLMols, lower = GLMols1)) #For backward selection, the first argument should be GLMols, the full model.
library(MASS)
GLMols1 <- glm(Crash_Score ~ 1, family = gaussian(), data = train) #If using forward selection it is necessary to fit a model with no predictors to use as the start.
stepAIC(GLMols1, direction = "backward", k = log(nrow(train)), scope = list(upper = GLMols, lower = GLMols1)) #For backward selection, the first argument should be GLMols, the full model.
library(MASS)
GLMols1 <- glm(Crash_Score ~ 1, family = gaussian(), data = train) #If using forward selection it is necessary to fit a model with no predictors to use as the start.
stepAIC(GLMols1, direction = "forward", k = log(nrow(train)), scope = list(upper = GLMols, lower = GLMols1)) #For backward selection, the first argument should be GLMols, the full model.
?stepAIC
stepAIC(GLMols1, direction = "forward", k = 2, scope = list(upper = GLMols, lower = GLMols1)) #For backward selection, the first argument should be GLMols, the full model.
library(glmnet)
set.seed(42)
X <- model.matrix(Crash_Score ~ .,train)
m <- cv.glmnet(x = X,
y = train$Crash_Score,
family = "gaussian",
alpha = 1) #alpha = 1 implies LASSO, alpha = 0 implies ridge
plot(m)
library(tidyverse)
library(ExamPAData)
# Loading data & releveling factors
dat <- june_pa %>%
mutate_if(is.character, fct_infreq)
dat %>% glimpse()
dat %>% ggplot(aes(Crash_Score)) + geom_histogram()
dat$Crash_Score %>% summary()
# Boxplots split by level of each variable.
library(ggplot2)
vars <- colnames(dat)[colnames(dat)!="Crash_Score"]
for (i in vars) {
plot <- ggplot(dat, aes(x=as.factor(dat[[i]]),y=Crash_Score)) + geom_boxplot() + labs(x=i)
print(plot)
}
# Boxplots split by level of each variable.
library(ggplot2)
vars <- colnames(dat)[colnames(dat)!="Crash_Score"]
for (i in vars) {
plot <- ggplot(dat, aes(x=as.factor(dat[[i]]),y=log(Crash_Score))) + geom_boxplot() + labs(x=i)
print(plot)
}
for (i in vars) {
plot <- ggplot(dat, aes(x=as.factor(dat[[i]]),y=log(Crash_Score))) + geom_boxplot() + labs(x=i) + coord_flip()
print(plot)
}
#Means and medians of the target variable split by predictor.
library(dplyr)
for (i in vars) {
print(i)
x <- dat %>% group_by_(i)%>%summarise(mean=mean(Crash_Score),
median=median(Crash_Score),
n = n())
print(x)
}
#Means and medians of the target variable split by predictor.
library(dplyr)
print(i)
x <- dat %>% group_by_(i)%>%summarise(mean=mean(Crash_Score),
median=median(Crash_Score),
n = n())
dat %>% map_dbl(~mean)
dat %>% map_dbl(mean)
dat %>% map_dbl(mean)
dat %>% map_dbl(median)
dat %>% map_dbl(~median(.x, na.rm = T))
dat %>% glimpse()
for (i in vars) {
print(i)
x <- dat %>% group_by_(i)%>% summarise(mean=mean(Crash_Score),
median=median(Crash_Score),
n = n())
print(x)
}
for (i in vars) {
print(i)
x <- dat %>% group_by_(i)%>% summarise(mean=mean(Crash_Score),
median=median(Crash_Score))
print(x)
}
for (i in vars) {
print(i)
x <- dat %>% group_by_(i)%>% summarise(mean=mean(Crash_Score),
median=median(Crash_Score))
print(x)
}
dat %>% glimpse()
dat %>%
group_by(year) %>%
summarise(mean = mean(Crash_Score),
median = median(Crash_Score))
dat %>%
group_by(year) %>%
dplyr::summarise(mean = mean(Crash_Score),
median = median(Crash_Score))
x <- dat %>% group_by_(i)%>% dplyr::summarise(mean=mean(Crash_Score),
median=median(Crash_Score))
for (i in vars) {
print(i)
x <- dat %>% group_by_(i)%>% dplyr::summarise(mean=mean(Crash_Score),
median=median(Crash_Score))
print(x)
}
vars <- colnames(dat)[colnames(dat)!="Crash_Score"]
for (i in vars) {
plot <- ggplot(dat, aes(x=dat[[i]])) + geom_bar() + labs(x=i) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(plot)
}
dat %>%
mutate(Time_of_Day = case_when(
Time_of_Day == 1 ~ "Early Morning",
Time_of_Day == 1 ~ "Early Morning",
Time_of_Day == 1 ~ "Early Morning",
Time_of_Day == 1 ~ "Early Morning",
))
Time_of_Day == 1 ~ "Early Morning",```
dat %>%
mutate(Time_of_Day = case_when(
Time_of_Day == 1 ~ "Morning",
Time_of_Day == 2 ~ "Morning",
Time_of_Day == 3 ~ "Day",
Time_of_Day == 4 ~ "Day",
Time_of_Day == 5 ~ "Evening",
Time_of_Day == 6 ~ "Night"
)) %>%
count(Time_of_Day)
library(dplyr)
dat %>%
mutate(Time_of_Day = case_when(
Time_of_Day == 1 ~ "Morning",
Time_of_Day == 2 ~ "Morning",
Time_of_Day == 3 ~ "Day",
Time_of_Day == 4 ~ "Day",
Time_of_Day == 5 ~ "Evening",
Time_of_Day == 6 ~ "Night"
)) %>%
count(Time_of_Day)
dat %>%
dplyr::mutate(Time_of_Day = case_when(
Time_of_Day == 1 ~ "Morning",
Time_of_Day == 2 ~ "Morning",
Time_of_Day == 3 ~ "Day",
Time_of_Day == 4 ~ "Day",
Time_of_Day == 5 ~ "Evening",
Time_of_Day == 6 ~ "Night"
)) %>%
count(Time_of_Day)
dat %>%
dplyr::mutate(Time_of_Day = case_when(
Time_of_Day == 1 ~ "Morning",
Time_of_Day == 2 ~ "Morning",
Time_of_Day == 3 ~ "Day",
Time_of_Day == 4 ~ "Day",
Time_of_Day == 5 ~ "Evening",
Time_of_Day == 6 ~ "Night"
))
dat %>%
dplyr::mutate(Time_of_Day = case_when(
Time_of_Day == 1 ~ "Morning",
Time_of_Day == 2 ~ "Morning",
Time_of_Day == 3 ~ "Day",
Time_of_Day == 4 ~ "Day",
Time_of_Day == 5 ~ "Evening",
Time_of_Day == 6 ~ "Night"
)) %>%
count(Time_of_Day)
detach("stats")
rm(list = ls())
lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
# Loading data
library(ExamPAData)
dat <- june_pa %>%
mutate_if(is.character, fct_infreq)
library(tidyverse)
dat <- june_pa %>%
mutate_if(is.character, fct_infreq)
library(ggplot2)
vars <- colnames(dat)[colnames(dat)!="Crash_Score"]
for (i in vars) {
plot <- ggplot(dat, aes(x=as.factor(dat[[i]]),y=Crash_Score)) + geom_boxplot() + labs(x=i)
print(plot)
}
#Means and medians of the target variable split by predictor.
library(dplyr)
for (i in vars) {
print(i)
x <- dat %>% group_by_(i)%>%summarise(mean=mean(Crash_Score),
median=median(Crash_Score),
n = n())
print(x)
}
# Bar charts of predictor variables
vars <- colnames(dat)[colnames(dat)!="Crash_Score"]
for (i in vars) {
plot <- ggplot(dat, aes(x=dat[[i]])) + geom_bar() + labs(x=i) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(plot)
}
#This example combines levels other than SIGNAL of Traffic_Control into a new level called NON-SIGNAL.
#Execute the function levels(dat$Traffic_Control) to idenity the levels. Be sure the variable is a factor variable before doing this.
dat2<-dat #The results are in a new data frame called dat2. This is done so that the results can be checked without losing the original data frame. When done, consider executing dat <- dat2 so subsequent chunks can run without modification
library(plyr)
var <- "Traffic_Control"
var.levels <- levels(dat2[[var]])
dat2[[var]] <- mapvalues(dat2[[var]],var.levels,c("NON-SIGNAL","NON-SIGNAL","SIGNAL","NON-SIGNAL","NON-SIGNAL"))
#Relevel
table <- as.data.frame(table(dat2[[var]]))
max <- which.max(table[,2])
level.name <- as.character(table[max,1])
dat2[var] <- relevel(dat2[[var]], ref = level.name)
table(dat2[[var]])
#Retain only the variables used for PCA and Binarize them
datPCA <- dat[c("Rd_Conditions", "Light", "Weather")]
library(caret)
# dummyVars is not compatible with factors
varsPCA <- colnames(datPCA)
for (var in varsPCA) {
datPCA[[var]] <- as.character(datPCA[[var]])
}
# Binarize variables
#fullRank = FALSE implies that all values get coded. This is appropriate for PCA (but not for regression)
binarizer <- caret::dummyVars(paste("~", paste(varsPCA, collapse = "+")) , data = datPCA, fullRank = FALSE)
datPCAbin <- data.frame(predict(binarizer, newdata = datPCA))
head(datPCAbin)
#Run PCA on the weather variables. Variables are centered and scaled.
PCAweather <- prcomp(datPCAbin, center = TRUE, scale. = TRUE)
summary(PCAweather)
PCAweather$rotation
#Center and scale the variables
datPCAbin.std <- as.data.frame(scale(datPCAbin))
#Create a new feature
dat2 <- dat #Preserving the original data frame until this work is complete
dat2$Snow.not.rain <- 0.5*datPCAbin.std$Rd_ConditionsICE.SNOW.SLUSH + .6*datPCAbin.std$WeatherSNOW - .2*datPCAbin.std$WeatherRAIN
head(dat2$Snow.not.rain)
# Visual exploration of interaction. Try pairs that seem intuitively likely to have an interaction. This example uses Rd_Feature and Rd_Class, but they were selected at random.
ggplot(dat,aes(x=Rd_Feature,y=Crash_Score,fill=Rd_Class))+
geom_boxplot()+
facet_wrap(~Rd_Feature,scale="free")
library(plyr)
var <- "Traffic_Control"
var.levels <- levels(dat2[[var]])
dat2[[var]] <- mapvalues(dat2[[var]],var.levels,c("NON-SIGNAL","NON-SIGNAL","SIGNAL","NON-SIGNAL","NON-SIGNAL"))
#Relevel
table <- as.data.frame(table(dat2[[var]]))
max <- which.max(table[,2])
level.name <- as.character(table[max,1])
dat2[var] <- relevel(dat2[[var]], ref = level.name)
rm(list = ls())
library(plyr)
var <- "Traffic_Control"
var.levels <- levels(dat2[[var]])
lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
library(ggplot2)
theme_set(theme_bw())
library(tidyverse)
tibble(y = rnorm(10, 0, 1),
x = y + 0.4*rnorm(10,0, 1)) %>%
ggplot(aes(x,y)) +
geom_point( show.legend = F) +
geom_smooth(method = "lm", se = F, aes(fill = "linear regression"), color = "red", show.legend = T) +
scale_fill_manual(name="legend", values=c("blue", "red")) +
theme(legend.position = "top")
library(ExamPAData)
library(tidyverse)
model <- lm(data = health_insurance, formula = charges ~ bmi + age)
summary(model)
library(caret)
#create a train/test split
index <- createDataPartition(y = health_insurance$charges,
p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
model <- lm(data = train, formula = charges ~ bmi + age)
pred = predict(model, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred, test$charges)
plot(model, which = 1)
plot(model, which = 2)
all_data <- lm(data = health_insurance,
formula = charges ~ bmi + age)
testing <- lm(data = test,
formula = charges ~ bmi + age)
library(broom)
library(kableExtra)
all_data %>% tidy() %>%
select(term, std.error) %>%
left_join(testing %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data_std_error = std.error.x, test_data_std_error = std.error.y) %>%
mutate_if(is.numeric, ~round(.x, 1)) %>%
kableExtra::kable("markdown")
coefficients(model)
library(ggplot2)
theme_set(theme_bw())
library(tidyverse)
tibble(y = rnorm(10, 0, 1),
x = y + 0.4*rnorm(10,0, 1)) %>%
ggplot(aes(x,y)) +
geom_point( show.legend = F) +
geom_smooth(method = "lm", se = F, aes(fill = "linear regression"), color = "red", show.legend = T) +
scale_fill_manual(name="legend", values=c("blue", "red")) +
theme(legend.position = "top")
library(ExamPAData)
library(tidyverse)
model <- lm(data = health_insurance, formula = charges ~ bmi + age)
summary(model)
library(caret)
#create a train/test split
index <- createDataPartition(y = health_insurance$charges,
p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
model <- lm(data = train, formula = charges ~ bmi + age)
pred = predict(model, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred, test$charges)
get_rmse(mean(test$charges), test$charges)
plot(model, which = 1)
plot(model, which = 2)
all_data <- lm(data = health_insurance,
formula = charges ~ bmi + age)
testing <- lm(data = test,
formula = charges ~ bmi + age)
library(broom)
library(kableExtra)
all_data %>% tidy() %>%
select(term, std.error) %>%
left_join(testing %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data_std_error = std.error.x, test_data_std_error = std.error.y) %>%
mutate_if(is.numeric, ~round(.x, 1)) %>%
kableExtra::kable("markdown")
coefficients(model)
tibble(y = exp(rnorm(1000))) %>%
mutate(log_y = log(y)) %>%
gather(stat, value) %>%
mutate(stat = ifelse(stat == "y", "Before Log Transform", "After Log Transform") %>%
fct_relevel(c("Before Log Transform", "After Log Transform"))) %>%
ggplot(aes(value)) +
geom_histogram() +
facet_wrap(vars(stat), scales = "free")
knitr::include_graphics("images/glm_links.png")
model = glm(formula = charges ~ age + sex + children,
family = gaussian(link = "log"),
data = health_insurance)
model = glm(formula = charges ~ age + sex + children,
family = gaussian(link = "log"),
data = health_insurance)
library(ggplot2)
theme_set(theme_bw())
library(tidyverse)
tibble(y = rnorm(10, 0, 1),
x = y + 0.4*rnorm(10,0, 1)) %>%
ggplot(aes(x,y)) +
geom_point( show.legend = F) +
geom_smooth(method = "lm", se = F, aes(fill = "linear regression"), color = "red", show.legend = T) +
scale_fill_manual(name="legend", values=c("blue", "red")) +
theme(legend.position = "top")
library(ExamPAData)
library(tidyverse)
model <- lm(data = health_insurance, formula = charges ~ bmi + age)
summary(model)
library(caret)
#create a train/test split
index <- createDataPartition(y = health_insurance$charges,
p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
model <- lm(data = train, formula = charges ~ bmi + age)
pred = predict(model, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred, test$charges)
get_rmse(mean(test$charges), test$charges)
plot(model, which = 1)
plot(model, which = 2)
all_data <- lm(data = health_insurance,
formula = charges ~ bmi + age)
testing <- lm(data = test,
formula = charges ~ bmi + age)
library(broom)
library(kableExtra)
all_data %>% tidy() %>%
select(term, std.error) %>%
left_join(testing %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data_std_error = std.error.x, test_data_std_error = std.error.y) %>%
mutate_if(is.numeric, ~round(.x, 1)) %>%
kableExtra::kable("markdown")
coefficients(model)
tibble(y = exp(rnorm(1000))) %>%
mutate(log_y = log(y)) %>%
gather(stat, value) %>%
mutate(stat = ifelse(stat == "y", "Before Log Transform", "After Log Transform") %>%
fct_relevel(c("Before Log Transform", "After Log Transform"))) %>%
ggplot(aes(value)) +
geom_histogram() +
facet_wrap(vars(stat), scales = "free")
knitr::include_graphics("images/glm_links.png")
model = glm(formula = charges ~ age + sex + children,
family = gaussian(link = "log"),
data = health_insurance)
health_insurance
library(ExamPAData)
health_insurance
rm(list = ls())
library(ExamPAData)
health_insurance
library(ggplot2)
theme_set(theme_bw())
library(tidyverse)
tibble(y = rnorm(10, 0, 1),
x = y + 0.4*rnorm(10,0, 1)) %>%
ggplot(aes(x,y)) +
geom_point( show.legend = F) +
geom_smooth(method = "lm", se = F, aes(fill = "linear regression"), color = "red", show.legend = T) +
scale_fill_manual(name="legend", values=c("blue", "red")) +
theme(legend.position = "top")
library(ExamPAData)
library(tidyverse)
model <- lm(data = health_insurance, formula = charges ~ bmi + age)
summary(model)
library(caret)
#create a train/test split
index <- createDataPartition(y = health_insurance$charges,
p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
model <- lm(data = train, formula = charges ~ bmi + age)
pred = predict(model, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred, test$charges)
get_rmse(mean(test$charges), test$charges)
plot(model, which = 1)
plot(model, which = 2)
all_data <- lm(data = health_insurance,
formula = charges ~ bmi + age)
testing <- lm(data = test,
formula = charges ~ bmi + age)
library(broom)
library(kableExtra)
all_data %>% tidy() %>%
select(term, std.error) %>%
left_join(testing %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data_std_error = std.error.x, test_data_std_error = std.error.y) %>%
mutate_if(is.numeric, ~round(.x, 1)) %>%
kableExtra::kable("markdown")
coefficients(model)
tibble(y = exp(rnorm(1000))) %>%
mutate(log_y = log(y)) %>%
gather(stat, value) %>%
mutate(stat = ifelse(stat == "y", "Before Log Transform", "After Log Transform") %>%
fct_relevel(c("Before Log Transform", "After Log Transform"))) %>%
ggplot(aes(value)) +
geom_histogram() +
facet_wrap(vars(stat), scales = "free")
model = glm(formula = charges ~ age + sex + children,
family = gaussian(link = "log"),
data = health_insurance)
model = glm(formula = charges ~ age + sex + children,
family = gaussian(link = "log"),
data = health_insurance)
model %>% tidy()
model = glm(formula = charges ~ age + sex + children,
family = Gamma(link = "log"),
data = health_insurance)
model %>% tidy()
health_insurance$sex %>% as.factor() %>% levels()
health_insurance$sex %>% as.factor() %>% summary()
health_insurance <- health_insurance %>%
mutate(sex = fct_infreq(sex))
health_insurance$sex %>% as.factor() %>% levels()
model %>% plot()
plot(model, which = 1)
plot(model, which = 2)
plot(model, which = 3)
plot(model, which = 3)
plot(model, which = 4)
plot(model, which = 5)
plot(model, which = 3)
plot(model, which = 3)
plot(model, which = 3)
model %>% tidy()
plot(model, which = 2)
plot(model, which = 2)
