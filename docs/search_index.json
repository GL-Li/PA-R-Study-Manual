[
["modeling.html", "Chapter 6 Modeling 6.1 Notation 6.2 Linear Models 6.3 Generalized linear models (GLMs) 6.4 Penalized Linear Models", " Chapter 6 Modeling 6.1 Notation The number of observations will be denoted by \\(n\\). When we refer to the size of a data set, we are referring to \\(n\\). We use \\(p\\) to refer the number of input variables used. The word “variables” is synonymous with “features”. For example, in the health_insurance data, the variables are age, sex, bmi, children, smoker and region. These 7 variables mean that \\(p = 7\\). The data is collected from 1,338 patients, which means that \\(n = 1,338\\). Scalar numbers are denoted by ordinary variables (i.e., \\(x = 2\\), \\(z = 4\\)), and vectors are denoted by bold-faced letters \\[\\mathbf{a} = \\begin{pmatrix} a_1 \\\\ a_2 \\\\ a_3 \\end{pmatrix}\\] We use \\(\\mathbf{y}\\) to denote the target variable. This is the variable which we are trying to predict. This can be either a whole number, in which case we are performing regression, or a category, in which case we are performing classification. In the health insurance example, y = charges, which are the annual health care costs for a patient. Both \\(n\\) and \\(p\\) are important because they tell us what types of models are likely to work well, and which methods are likely to fail. For the PA exam, we will be dealing with small \\(n\\) (&lt;100,000) due to the limitations of the Prometric computers. We will use a small \\(p\\) (&lt; 20) in order to make the data sets easier to interpret. We organize these variables into matrices. Take an example with \\(p\\) = 2 columns and 3 observations. The matrix is said to be \\(3 \\times 2\\) (read as “2-by-3”) matrix. \\[ \\mathbf{X} = \\begin{pmatrix}x_{11} &amp; x_{21}\\\\ x_{21} &amp; x_{22}\\\\ x_{31} &amp; x_{32} \\end{pmatrix} \\] The target is \\[\\mathbf{y} = \\begin{pmatrix} y_1 \\\\ y_2 \\\\ y_3 \\end{pmatrix}\\] This represents the unknown quantity that we want to be able to predict. In the health care costs example, \\(y_1\\) would be the costs of the first patient, \\(y_2\\) the costs of the second patient, and so forth. The variables \\(x_{11}\\) and \\(x_{12}\\) might represent the first patient’s age and sex respectively, where \\(x_{i1}\\) is the patient’s age, and \\(x_{i2} = 1\\) if the ith patient is male and 0 if female. Machine learning is about using \\(\\mathbf{X}\\) to predict \\(\\mathbf{y}\\). We call this “y-hat”, or simply the prediction. This is based on a function of the data \\(X\\). \\[\\mathbf{\\hat{y}} = f(\\mathbf{X}) = \\begin{pmatrix} \\hat{y_1} \\\\ \\hat{y_2} \\\\ \\hat{y_3} \\end{pmatrix}\\] This is almost never going to happen perfectly, and so there is always an error term, \\(\\mathbf{\\epsilon}\\). This can be made smaller, but is never exactly zero. \\[ \\mathbf{\\hat{y}} + \\mathbf{\\epsilon} = f(\\mathbf{X}) + \\mathbf{\\epsilon} \\] In other words, \\(\\epsilon = y - \\hat{y}\\). We call this the residual. When we predict a person’s health care costs, this is the difference between the predicted costs (which we had created the year before) and the actual costs that the patient experienced (of that current year). 6.2 Linear Models 6.2.1 Model Form The type of model used refers to the class of function of \\(f\\). If \\(f\\) is linear, then we are using a linear model. If \\(f\\) is non-parametric (does not have input parameters), then it is non-parametric modeling. Linear models are the simplest type of model. We have the data \\(\\mathbf{X}\\) and the target \\(\\mathbf{y}\\), where all of the y’s are real numbers, or \\(y_i \\in \\mathbb{R}\\). We want to find a \\(\\mathbf{\\beta}\\) so that \\[ \\mathbf{\\hat{y}} = \\mathbf{X} \\mathbf{\\beta} \\] Which means that each \\(y_i\\) is a linear combination of the variables \\(x_1, ..., x_p\\), plus a constant \\(\\beta_0\\) which is called the intercept term. \\[ \\begin{equation} y_i = \\beta_0 + \\beta_1 x_1 + ... + \\beta_p x_p \\end{equation} \\] In the one-dimensional case, this creates a line connecting the points. In higher dimensions, this creates a hyperplane. The question then is how can we choose the best values of \\(\\beta?\\) First of all, we need to define what we mean by “best”. Ideally, we will choose these values which will create close predictions of \\(\\mathbf{y}\\) on new, unseen data. To solve for \\(\\mathbf{\\beta}\\), we first need to define a loss function. This allows us to compare how well a model is fitting the data. The most commonly used loss function is the residual sum of squares (RSS), also called the squared error loss or the L2 norm. When RSS is small, then the predictions are close to the actual values and the model is a good fit. When RSS is large, the model is a poor fit. \\[ \\text{RSS} = \\sum_i(y_i - \\hat{y})^2 \\] When you replace \\(\\hat{y_i}\\) in the above equation with \\(\\beta_0 + \\beta_1 x_1 + ... + \\beta_p x_p\\), take the derivative with respect to \\(\\beta\\), set equal to zero, and solve, we can find the optimal values. This turns the problem of statistics into a problem of numeric optimization, which computers can do quickly. You might be asking: why does this need to be the squared error? Why not the absolute error, or the cubed error? Technically, these could be used as well. In fact, the absolute error (L1 norm) is useful in other models. Taking the square has a number of advantages. It provides the same solution if we assume that the distribution of \\(\\mathbf{Y}|\\mathbf{X}\\) is guassian and maximize the likelihood function. This method is used for GLMs, in the next chapter. Empirically it has been shown to be less likely to overfit as compared to other loss functions 6.2.2 Example In our example, we can create a linear model using bmi, age, and sex as an inputs. The fitted model is \\[\\hat{y_i} = -6,986 + 327\\space\\text{bmi} + 243\\space \\text{age} + 1,344 \\space \\text{sex_male}\\] For example, if a patient has bmi = 27.9, age = 19, sex_male = 0, then predicted value is \\[\\hat{y_1} = -6,986 + (327)(27.9) + (243)(19) + (1,344)(0) = 6,754.3\\] This model structure implies that each of the variables \\(\\mathbf{x_1}, ..., \\mathbf{x_p}\\) each change the predicted \\(\\mathbf{\\hat{y}}\\). If \\(x_{ij}\\) increases by one unit, then \\(y_i\\) increases by \\(\\beta_j\\) units, regardless of what happens to all of the other variables. This is one of the main assumptions of linear models: variable indepdendence. If the variables are correlated, say, then this assumption will be violated. There are several other key assumptions to linear models, which are listed at the end of this chapter for brevity. Readings ISLR 2.1 What is statistical learning? ISLR 2.2 Assessing model accuracy 6.3 Generalized linear models (GLMs) Instead of the model being a direct linear combination of the variables, there is an intermediate step called a link function \\(g\\). \\[ g(\\mathbf{\\hat{y}}) = \\mathbf{X} \\mathbf{\\beta} \\] This implies that the response \\(\\mathbf{y}\\) is related to the linear predictor \\(\\mathbf{X} \\mathbf{\\beta}\\) through the inverse link function. \\[ \\mathbf{\\hat{y}} = g^-1(\\mathbf{X} \\mathbf{\\beta}) \\] This means that \\(g(.)\\) must be an invertable. For example, if \\(g\\) is the natural logarithm (aka, the “log-link”), then \\[ log(\\mathbf{\\hat{y}}) = \\mathbf{X} \\mathbf{\\beta} \\Rightarrow \\mathbf{\\hat{y}} = e^{\\mathbf{X} \\mathbf{\\beta}} \\] This is useful when the distribution of \\(Y\\) is skewed, as taking the log corrects skewness. Figure 6.1: Taking the log corrects for skewness You might be asking, what if the distribution of \\(Y\\) is not normal, no matter what choice we have for \\(g\\)? The short answer is that we can change our assumption of the distribution of \\(Y\\), and use this to change the parameters. If you have taken exam STAM then you are familiar with maximum likelihood estimation. We have a response \\(\\mathbf{Y}\\), and we fit a distribution to \\(\\mathbf{Y} | \\mathbf{X}\\). This is the target variable conditioned on the data. For each \\(y_i\\), each observation, we assign a probability \\(f_Y(y_i)\\) \\[ f_y(y_i | X_1 = x_1, X_2 = x_2, ..., X_p = x_p) = Pr(Y = y_i | \\mathbf{X}) \\] Now, when we choose the response family, we are simply changing \\(f\\). If we say that the response family is Gaussian, then \\(f\\) has a Gaussian PDF. If we are modeling counts, then \\(f\\) is a Poisson PDF. This only works if \\(f\\) is in the exponential family of distributions, which consists of the common names such as Gaussian, Binomial, Gamma, Inverse Gamma, and so forth. Reading the CAS Monograph 5 will provide more detail into this. The possible combinations of link functions and distribution families are summarized nicely on Wikipedia. Figure 6.2: Distribution-Link Function Combinations For this exam, a common question is to ask candiates to choose the best distribution and link function. There is no all-encompasing answer, but a few suggestions are If \\(Y\\) is counting something, such as the number of claims, number of accidents, or some other discrete and positive counting sequence, use the Poisson; If \\(Y\\) contains negative values, then do not use the Exponential, Gamma, or Inverse Gaussian as these are strictly positive. Conversely, if \\(Y\\) is only positive, such as the price of a policy (price is always &gt; 0), or the claim costs, then these are good choices; If \\(Y\\) is categorical (either binary or with more than two outcomes), only the Logic or Probit The exam will always ask you to interpret the GLM. These questions can usually be answered by inverting the link function and interpreting the coefficients. In the case of the log link, simply take the exponent of the coefficients and each of these represents a “relativity” factor. \\[ log(\\mathbf{\\hat{y}}) = \\mathbf{X} \\mathbf{\\beta} \\Rightarrow \\mathbf{\\hat{y}} = e^{\\mathbf{X} \\mathbf{\\beta}} \\] For a single observation \\(y_i\\), this is \\[ \\text{exp}(\\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + ... + \\beta_p x_{ip}) = \\\\ e^{\\beta_0} e^{\\beta_1 x_{i1}}e^{\\beta_2 x_{i2}} ... e^{\\beta_p x_{ip}} = R_o R_2 R_3 ... R_{p} \\] Where \\(R_k\\) is the relativity of the kth variable. This terminology is from insurance ratemaking, where actuaries need to be able to explain the impact of each variable in pricing insurance. The data science community does not use this language. For binary outcomes with logit or probit link, there is no easy interpretation. This has come up in at least one past sample exam, and the solution was to create “psuedo” observations and observe how changing each \\(x_k\\) would change the predicted value. Due to the time requirements, this is unlikely to come up on an exam. So if you are asked to use a logit or probit link, saying that the result is not easy to interpret should suffice. Readings CAS Monograph 5 Chapter 2 ISLR 2.2 Assessing model accuracy 6.3.1 Advantages and disadvantages There is usually at least one question on the PA exam which asks you to “list some of the advantages and disadvantages of using this particular model”, and so here is one such list. GLM Advantages Easy to interpret Handles skewed data through different response distributions Models the average response which leads to stable predictions on new data Handles continuous and categorical data Works well on small data sets GLM Disadvantages Does not select features Strict assumptions around distribution shape, randomness of error terms, and others Unable to detect non-linearity directly (although this can manually be addressed through feature engineering) Sensitive to outliers Low predictive power 6.4 Penalized Linear Models One of the main weaknesses of the GLM is that the features need to be selected by hand. For large \\(p\\), this means that the modeler needs to test every combination of variables. This is time consuming. Earlier on we said that the linear model minimizes the sum of square terms, known as the residual sum of squares (RSS) \\[ \\text{RSS} = \\sum_i(y_i - \\hat{y})^2 = \\sum_i(y_i - \\beta_0 - \\sum_{j = 1}^p\\beta_j x_{ij})^2 \\] This loss function can be modified so that models which include more (and larger) coefficients are considered as worse. In other words, when there are more \\(\\beta\\)’s, or \\(\\beta\\)’s which are larger, the RSS is higher. 6.4.1 Ridge Regression Ridge regression adds a penalty term which is proportional to the square of the sum of the coefficients. This is known as the “L2” norm. \\[ \\sum_i(y_i - \\beta_0 - \\sum_{j = 1}^p\\beta_j x_{ij})^2 + \\lambda \\sum_{j = 1}^p\\beta_j^2 \\] This \\(\\lamda\\) controls how much of a penalty is imposed on the size of the coefficients. When \\(\\lambda\\) is high, simpler models are treated more favorably because the \\(\\sum_{j = 1}^p\\beta_j^2\\) carries more weight. Conversely, then \\(\\lambda\\) is low, complex models are more favored. When \\(\\lambda = 0\\), we have an ordinary GLM. 6.4.2 Lasso The official name is the Least Absolute Shrinkage and Selection Operator, but the common name is just “the lasso”. Just as with Ridge regression, we want to favor simpler models; however, we also want to select variables. This is the same as forcing some coefficients to be equal to 0. Instead of taking the square of the coefficients (L2 norm), we take the absolute value (L1 norm). \\[ \\sum_i(y_i - \\beta_0 - \\sum_{j = 1}^p\\beta_j x_{ij})^2 + \\lambda \\sum_{j = 1}^p|\\beta_j| \\] In ISLR, Hastie et al show that this results in coefficients being forced to be exactly 0. This is extremely useful because it means that by changing \\(\\lambda\\), we can select how many variables to use in the model. Note: While any response family is possible with penalized regression, in R, only the Gaussian family is possible in the library glmnet, and so this is the only type of question that the SOA can ask. 6.4.3 Advantages and disadvantages Elastic Net/Lasso/Ridge Advantages - All benefits from GLMS - Automatic variable selection - Better predictive power than GLM (usually) Elastic Net/Lasso/Ridge Disadvantages - All cons of GLMs Readings ISLR 6.1 Subset Selection ISLR 6.2 Shrinkage Methods "]
]
